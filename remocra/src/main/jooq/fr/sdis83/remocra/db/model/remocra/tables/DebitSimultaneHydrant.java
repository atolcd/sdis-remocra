/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DebitSimultaneHydrant extends TableImpl<Record> {

	private static final long serialVersionUID = -1420713582;

	/**
	 * The reference instance of <code>remocra.debit_simultane_hydrant</code>
	 */
	public static final DebitSimultaneHydrant DEBIT_SIMULTANE_HYDRANT = new DebitSimultaneHydrant();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>remocra.debit_simultane_hydrant.id</code>.
	 */
	public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>remocra.debit_simultane_hydrant.debit</code>. Debit_simultane_mesure lié
	 */
	public final TableField<Record, Long> DEBIT = createField("debit", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Debit_simultane_mesure lié");

	/**
	 * The column <code>remocra.debit_simultane_hydrant.hydrant</code>.
	 */
	public final TableField<Record, Long> HYDRANT = createField("hydrant", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * Create a <code>remocra.debit_simultane_hydrant</code> table reference
	 */
	public DebitSimultaneHydrant() {
		this("debit_simultane_hydrant", null);
	}

	/**
	 * Create an aliased <code>remocra.debit_simultane_hydrant</code> table reference
	 */
	public DebitSimultaneHydrant(String alias) {
		this(alias, DEBIT_SIMULTANE_HYDRANT);
	}

	private DebitSimultaneHydrant(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private DebitSimultaneHydrant(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Remocra.REMOCRA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<Record, Long> getIdentity() {
		return Keys.IDENTITY_DEBIT_SIMULTANE_HYDRANT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.DEBIT_SIMULTANE_HYDRANT_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.DEBIT_SIMULTANE_HYDRANT_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.DEBIT_SIMULTANE_HYDRANT__FK_DEBIT, Keys.DEBIT_SIMULTANE_HYDRANT__FK_HDYRANT);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DebitSimultaneHydrant as(String alias) {
		return new DebitSimultaneHydrant(alias, this);
	}

	/**
	 * Rename this table
	 */
	public DebitSimultaneHydrant rename(String name) {
		return new DebitSimultaneHydrant(name, null);
	}
}
