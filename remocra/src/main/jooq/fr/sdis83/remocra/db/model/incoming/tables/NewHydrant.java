/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.incoming.tables;


import com.vividsolutions.jts.geom.Geometry;

import fr.sdis83.remocra.db.converter.GeometryBinding;
import fr.sdis83.remocra.db.model.incoming.Incoming;
import fr.sdis83.remocra.db.model.incoming.Keys;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewHydrant extends TableImpl<Record> {

	private static final long serialVersionUID = -1538868468;

	/**
	 * The reference instance of <code>incoming.new_hydrant</code>
	 */
	public static final NewHydrant NEW_HYDRANT = new NewHydrant();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>incoming.new_hydrant.id_new_hydrant</code>.
	 */
	public final TableField<Record, UUID> ID_NEW_HYDRANT = createField("id_new_hydrant", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>incoming.new_hydrant.geometrie</code>.
	 */
	public final TableField<Record, Geometry> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), this, "", new GeometryBinding());

	/**
	 * The column <code>incoming.new_hydrant.code_new_hydrant</code>.
	 */
	public final TableField<Record, String> CODE_NEW_HYDRANT = createField("code_new_hydrant", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>incoming.new_hydrant.id_commune</code>.
	 */
	public final TableField<Record, Long> ID_COMMUNE = createField("id_commune", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>incoming.new_hydrant.voie_new_hydrant</code>.
	 */
	public final TableField<Record, String> VOIE_NEW_HYDRANT = createField("voie_new_hydrant", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>incoming.new_hydrant.id_gestionnaire</code>.
	 */
	public final TableField<Record, UUID> ID_GESTIONNAIRE = createField("id_gestionnaire", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>incoming.new_hydrant.id_nature</code>.
	 */
	public final TableField<Record, Long> ID_NATURE = createField("id_nature", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>incoming.new_hydrant.id_naturedeci</code>.
	 */
	public final TableField<Record, Long> ID_NATUREDECI = createField("id_naturedeci", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>incoming.new_hydrant.observation_new_hydrant</code>.
	 */
	public final TableField<Record, String> OBSERVATION_NEW_HYDRANT = createField("observation_new_hydrant", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>incoming.new_hydrant.id_gestionnaire_remocra</code>.
	 */
	public final TableField<Record, Long> ID_GESTIONNAIRE_REMOCRA = createField("id_gestionnaire_remocra", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>incoming.new_hydrant</code> table reference
	 */
	public NewHydrant() {
		this("new_hydrant", null);
	}

	/**
	 * Create an aliased <code>incoming.new_hydrant</code> table reference
	 */
	public NewHydrant(String alias) {
		this(alias, NEW_HYDRANT);
	}

	private NewHydrant(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private NewHydrant(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Incoming.INCOMING, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.NEW_HYDRANT_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.NEW_HYDRANT_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.NEW_HYDRANT__NEW_HYDRANT_ID_COMMUNE_FKEY, Keys.NEW_HYDRANT__NEW_HYDRANT_ID_GESTIONNAIRE_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public NewHydrant as(String alias) {
		return new NewHydrant(alias, this);
	}

	/**
	 * Rename this table
	 */
	public NewHydrant rename(String name) {
		return new NewHydrant(name, null);
	}
}
