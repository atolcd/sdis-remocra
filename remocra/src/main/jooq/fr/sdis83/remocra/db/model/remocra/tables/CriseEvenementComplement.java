/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Information complémentaire (attribut) attachée à un événement d'une nature 
 * spécifique
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CriseEvenementComplement extends TableImpl<Record> {

	private static final long serialVersionUID = 1664573113;

	/**
	 * The reference instance of <code>remocra.crise_evenement_complement</code>
	 */
	public static final CriseEvenementComplement CRISE_EVENEMENT_COMPLEMENT = new CriseEvenementComplement();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>remocra.crise_evenement_complement.id</code>. Identifiant interne
	 */
	public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "Identifiant interne");

	/**
	 * The column <code>remocra.crise_evenement_complement.valeur_formatee</code>. Valeur affichée dans les formulaires et exploitée dans les exports
	 */
	public final TableField<Record, String> VALEUR_FORMATEE = createField("valeur_formatee", org.jooq.impl.SQLDataType.VARCHAR, this, "Valeur affichée dans les formulaires et exploitée dans les exports");

	/**
	 * The column <code>remocra.crise_evenement_complement.valeur_source</code>. Valeur de l'identifiant dans le cas ou une source de données SQL a été définie pour la propriété
	 */
	public final TableField<Record, String> VALEUR_SOURCE = createField("valeur_source", org.jooq.impl.SQLDataType.VARCHAR, this, "Valeur de l'identifiant dans le cas ou une source de données SQL a été définie pour la propriété");

	/**
	 * The column <code>remocra.crise_evenement_complement.evenement</code>. Evènement associé
	 */
	public final TableField<Record, Long> EVENEMENT = createField("evenement", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Evènement associé");

	/**
	 * The column <code>remocra.crise_evenement_complement.propriete_evenement</code>. Propriété d'évènement associée
	 */
	public final TableField<Record, Long> PROPRIETE_EVENEMENT = createField("propriete_evenement", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Propriété d'évènement associée");

	/**
	 * Create a <code>remocra.crise_evenement_complement</code> table reference
	 */
	public CriseEvenementComplement() {
		this("crise_evenement_complement", null);
	}

	/**
	 * Create an aliased <code>remocra.crise_evenement_complement</code> table reference
	 */
	public CriseEvenementComplement(String alias) {
		this(alias, CRISE_EVENEMENT_COMPLEMENT);
	}

	private CriseEvenementComplement(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private CriseEvenementComplement(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Remocra.REMOCRA, aliased, parameters, "Information complémentaire (attribut) attachée à un événement d'une nature spécifique");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<Record, Long> getIdentity() {
		return Keys.IDENTITY_CRISE_EVENEMENT_COMPLEMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.CRISE_EVENEMENT_COMPLEMENT_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.CRISE_EVENEMENT_COMPLEMENT_PKEY, Keys.CRISE_EVENEMENT_COMPLEMENT_EVENEMENT_PROPRIETE_UNIQ);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.CRISE_EVENEMENT_COMPLEMENT__CRISE_EVENEMENT_COMPLEMENT_TYPE_EVENEMENT_PROPRIETE_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CriseEvenementComplement as(String alias) {
		return new CriseEvenementComplement(alias, this);
	}

	/**
	 * Rename this table
	 */
	public CriseEvenementComplement rename(String name) {
		return new CriseEvenementComplement(name, null);
	}
}
