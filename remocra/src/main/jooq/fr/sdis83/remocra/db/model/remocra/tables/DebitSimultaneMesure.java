/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.converter.InstantConverter;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.joda.time.Instant;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DebitSimultaneMesure extends TableImpl<Record> {

	private static final long serialVersionUID = -1370624825;

	/**
	 * The reference instance of <code>remocra.debit_simultane_mesure</code>
	 */
	public static final DebitSimultaneMesure DEBIT_SIMULTANE_MESURE = new DebitSimultaneMesure();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>remocra.debit_simultane_mesure.id</code>.
	 */
	public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>remocra.debit_simultane_mesure.debit_simultane</code>.
	 */
	public final TableField<Record, Long> DEBIT_SIMULTANE = createField("debit_simultane", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>remocra.debit_simultane_mesure.debit_requis</code>.
	 */
	public final TableField<Record, Integer> DEBIT_REQUIS = createField("debit_requis", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>remocra.debit_simultane_mesure.debit_mesure</code>.
	 */
	public final TableField<Record, Integer> DEBIT_MESURE = createField("debit_mesure", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>remocra.debit_simultane_mesure.date_mesure</code>.
	 */
	public final TableField<Record, Instant> DATE_MESURE = createField("date_mesure", org.jooq.impl.SQLDataType.TIMESTAMP.defaulted(true), this, "", new InstantConverter());

	/**
	 * The column <code>remocra.debit_simultane_mesure.debit_retenu</code>.
	 */
	public final TableField<Record, Integer> DEBIT_RETENU = createField("debit_retenu", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>remocra.debit_simultane_mesure.irv</code>.
	 */
	public final TableField<Record, Boolean> IRV = createField("irv", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "");

	/**
	 * The column <code>remocra.debit_simultane_mesure.commentaire</code>.
	 */
	public final TableField<Record, String> COMMENTAIRE = createField("commentaire", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * Create a <code>remocra.debit_simultane_mesure</code> table reference
	 */
	public DebitSimultaneMesure() {
		this("debit_simultane_mesure", null);
	}

	/**
	 * Create an aliased <code>remocra.debit_simultane_mesure</code> table reference
	 */
	public DebitSimultaneMesure(String alias) {
		this(alias, DEBIT_SIMULTANE_MESURE);
	}

	private DebitSimultaneMesure(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private DebitSimultaneMesure(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Remocra.REMOCRA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<Record, Long> getIdentity() {
		return Keys.IDENTITY_DEBIT_SIMULTANE_MESURE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.DEBIT_SIMULTANE_MESURE_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.DEBIT_SIMULTANE_MESURE_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.DEBIT_SIMULTANE_MESURE__FK_DEBIT_SIMULTANE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DebitSimultaneMesure as(String alias) {
		return new DebitSimultaneMesure(alias, this);
	}

	/**
	 * Rename this table
	 */
	public DebitSimultaneMesure rename(String name) {
		return new DebitSimultaneMesure(name, null);
	}
}
