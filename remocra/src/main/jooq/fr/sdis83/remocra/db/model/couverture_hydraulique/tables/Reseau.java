/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.couverture_hydraulique.tables;


import com.vividsolutions.jts.geom.Geometry;

import fr.sdis83.remocra.db.converter.GeometryBinding;
import fr.sdis83.remocra.db.model.couverture_hydraulique.CouvertureHydraulique;
import fr.sdis83.remocra.db.model.couverture_hydraulique.Keys;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Réseau routier de la couverture hydraulique
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reseau extends TableImpl<Record> {

	private static final long serialVersionUID = 1785233407;

	/**
	 * The reference instance of <code>couverture_hydraulique.reseau</code>
	 */
	public static final Reseau RESEAU = new Reseau();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>couverture_hydraulique.reseau.id</code>.
	 */
	public final TableField<Record, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>couverture_hydraulique.reseau.geometrie</code>.
	 */
	public final TableField<Record, Geometry> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), this, "", new GeometryBinding());

	/**
	 * The column <code>couverture_hydraulique.reseau.source</code>. Sommet source de la voie (déterminé par la création de la topologie)
	 */
	public final TableField<Record, Integer> SOURCE = createField("source", org.jooq.impl.SQLDataType.INTEGER, this, "Sommet source de la voie (déterminé par la création de la topologie)");

	/**
	 * The column <code>couverture_hydraulique.reseau.destination</code>. Sommet de destination de la voie (déterminé par la création de la topologie)
	 */
	public final TableField<Record, Integer> DESTINATION = createField("destination", org.jooq.impl.SQLDataType.INTEGER, this, "Sommet de destination de la voie (déterminé par la création de la topologie)");

	/**
	 * The column <code>couverture_hydraulique.reseau.pei_troncon</code>. Identifiant du pei si la voie relie un pei au réseau routier, NULL sinon
	 */
	public final TableField<Record, Integer> PEI_TRONCON = createField("pei_troncon", org.jooq.impl.SQLDataType.INTEGER, this, "Identifiant du pei si la voie relie un pei au réseau routier, NULL sinon");

	/**
	 * The column <code>couverture_hydraulique.reseau.traversable</code>. Indique si l'on peut ou non traverser cette voie
	 */
	public final TableField<Record, Boolean> TRAVERSABLE = createField("traversable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "Indique si l'on peut ou non traverser cette voie");

	/**
	 * The column <code>couverture_hydraulique.reseau.sens_unique</code>. Indique si la voie est à sens unique. Le sens est celui de la digitalisation de la géométrie
	 */
	public final TableField<Record, Boolean> SENS_UNIQUE = createField("sens_unique", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "Indique si la voie est à sens unique. Le sens est celui de la digitalisation de la géométrie");

	/**
	 * The column <code>couverture_hydraulique.reseau.niveau</code>. Niveau de la voie (ex: -1 pour un tunnel, 1 pour un pont, etc) si celle-ci est au-dessus ou en dessous du réseau routier
	 */
	public final TableField<Record, Integer> NIVEAU = createField("niveau", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "Niveau de la voie (ex: -1 pour un tunnel, 1 pour un pont, etc) si celle-ci est au-dessus ou en dessous du réseau routier");

	/**
	 * The column <code>couverture_hydraulique.reseau.etude</code>.
	 */
	public final TableField<Record, Long> ETUDE = createField("etude", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>couverture_hydraulique.reseau</code> table reference
	 */
	public Reseau() {
		this("reseau", null);
	}

	/**
	 * Create an aliased <code>couverture_hydraulique.reseau</code> table reference
	 */
	public Reseau(String alias) {
		this(alias, RESEAU);
	}

	private Reseau(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private Reseau(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, CouvertureHydraulique.COUVERTURE_HYDRAULIQUE, aliased, parameters, "Réseau routier de la couverture hydraulique");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<Record, Integer> getIdentity() {
		return Keys.IDENTITY_RESEAU;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.RESEAU_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.RESEAU_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.RESEAU__FK_ETUDE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Reseau as(String alias) {
		return new Reseau(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Reseau rename(String name) {
		return new Reseau(name, null);
	}
}
