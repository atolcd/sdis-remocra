/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.incoming.tables;


import fr.sdis83.remocra.db.model.incoming.Incoming;
import fr.sdis83.remocra.db.model.incoming.Keys;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HydrantVisiteAnomalie extends TableImpl<Record> {

	private static final long serialVersionUID = -1718323255;

	/**
	 * The reference instance of <code>incoming.hydrant_visite_anomalie</code>
	 */
	public static final HydrantVisiteAnomalie HYDRANT_VISITE_ANOMALIE = new HydrantVisiteAnomalie();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>incoming.hydrant_visite_anomalie.id_hydrant_visite</code>.
	 */
	public final TableField<Record, UUID> ID_HYDRANT_VISITE = createField("id_hydrant_visite", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>incoming.hydrant_visite_anomalie.id_anomalie</code>.
	 */
	public final TableField<Record, Long> ID_ANOMALIE = createField("id_anomalie", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * Create a <code>incoming.hydrant_visite_anomalie</code> table reference
	 */
	public HydrantVisiteAnomalie() {
		this("hydrant_visite_anomalie", null);
	}

	/**
	 * Create an aliased <code>incoming.hydrant_visite_anomalie</code> table reference
	 */
	public HydrantVisiteAnomalie(String alias) {
		this(alias, HYDRANT_VISITE_ANOMALIE);
	}

	private HydrantVisiteAnomalie(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private HydrantVisiteAnomalie(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Incoming.INCOMING, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.HYDRANT_ANOMALIE_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.HYDRANT_ANOMALIE_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.HYDRANT_VISITE_ANOMALIE__HYDRANT_VISITE_ANOMALIE_ID_HYDRANT_VISITE_FKEY, Keys.HYDRANT_VISITE_ANOMALIE__HYDRANT_VISITE_ANOMALIE_ID_ANOMALIE_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public HydrantVisiteAnomalie as(String alias) {
		return new HydrantVisiteAnomalie(alias, this);
	}

	/**
	 * Rename this table
	 */
	public HydrantVisiteAnomalie rename(String name) {
		return new HydrantVisiteAnomalie(name, null);
	}
}
