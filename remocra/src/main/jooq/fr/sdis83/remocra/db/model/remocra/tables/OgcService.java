/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Service de données mobilisable sur un serveur OGC
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OgcService extends TableImpl<Record> {

	private static final long serialVersionUID = -1653750310;

	/**
	 * The reference instance of <code>remocra.ogc_service</code>
	 */
	public static final OgcService OGC_SERVICE = new OgcService();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>remocra.ogc_service.id</code>. Identifiant interne
	 */
	public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "Identifiant interne");

	/**
	 * The column <code>remocra.ogc_service.type_service</code>. Type de service OGC proposé par le serveur OGC
	 */
	public final TableField<Record, String> TYPE_SERVICE = createField("type_service", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Type de service OGC proposé par le serveur OGC");

	/**
	 * The column <code>remocra.ogc_service.nom</code>. Titre associé aux métadonnées du service
	 */
	public final TableField<Record, String> NOM = createField("nom", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Titre associé aux métadonnées du service");

	/**
	 * The column <code>remocra.ogc_service.description</code>. Résumé associé aux métadonnées du service
	 */
	public final TableField<Record, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "Résumé associé aux métadonnées du service");

	/**
	 * The column <code>remocra.ogc_service.ogc_source</code>. Serveur OGC associé
	 */
	public final TableField<Record, Long> OGC_SOURCE = createField("ogc_source", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Serveur OGC associé");

	/**
	 * Create a <code>remocra.ogc_service</code> table reference
	 */
	public OgcService() {
		this("ogc_service", null);
	}

	/**
	 * Create an aliased <code>remocra.ogc_service</code> table reference
	 */
	public OgcService(String alias) {
		this(alias, OGC_SERVICE);
	}

	private OgcService(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private OgcService(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Remocra.REMOCRA, aliased, parameters, "Service de données mobilisable sur un serveur OGC");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<Record, Long> getIdentity() {
		return Keys.IDENTITY_OGC_SERVICE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.OGC_SERVICE_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.OGC_SERVICE_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.OGC_SERVICE__OGC_SOURCE_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OgcService as(String alias) {
		return new OgcService(alias, this);
	}

	/**
	 * Rename this table
	 */
	public OgcService rename(String name) {
		return new OgcService(name, null);
	}
}
