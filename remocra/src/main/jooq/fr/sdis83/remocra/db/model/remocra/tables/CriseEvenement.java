/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.converter.InstantConverter;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.joda.time.Instant;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Evènement associé à une crise. Route inondée sur la RD 84 à la position 
 * ....
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CriseEvenement extends TableImpl<Record> {

	private static final long serialVersionUID = 437178070;

	/**
	 * The reference instance of <code>remocra.crise_evenement</code>
	 */
	public static final CriseEvenement CRISE_EVENEMENT = new CriseEvenement();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>remocra.crise_evenement.id</code>. Identifiant interne
	 */
	public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "Identifiant interne");

	/**
	 * The column <code>remocra.crise_evenement.geometrie</code>.
	 */
	public final TableField<Record, Object> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), this, "");

	/**
	 * The column <code>remocra.crise_evenement.nom</code>. Titre de l'évènement
	 */
	public final TableField<Record, String> NOM = createField("nom", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Titre de l'évènement");

	/**
	 * The column <code>remocra.crise_evenement.description</code>. Information générale sur l'evènement (cause, autre information utile, etc.)
	 */
	public final TableField<Record, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "Information générale sur l'evènement (cause, autre information utile, etc.)");

	/**
	 * The column <code>remocra.crise_evenement.constat</code>. Date et heure de constat du phénomène ou de l'action
	 */
	public final TableField<Record, Instant> CONSTAT = createField("constat", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "Date et heure de constat du phénomène ou de l'action", new InstantConverter());

	/**
	 * The column <code>remocra.crise_evenement.redefinition</code>. Date et heure de modification de l'évènement
	 */
	public final TableField<Record, Instant> REDEFINITION = createField("redefinition", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Date et heure de modification de l'évènement", new InstantConverter());

	/**
	 * The column <code>remocra.crise_evenement.cloture</code>. Date et heure de fin de vie de l'évènement
	 */
	public final TableField<Record, Instant> CLOTURE = createField("cloture", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Date et heure de fin de vie de l'évènement", new InstantConverter());

	/**
	 * The column <code>remocra.crise_evenement.origine</code>. Origine de l'information : habitant, service de gendarmerie, twitter, etc.
	 */
	public final TableField<Record, String> ORIGINE = createField("origine", org.jooq.impl.SQLDataType.VARCHAR, this, "Origine de l'information : habitant, service de gendarmerie, twitter, etc.");

	/**
	 * The column <code>remocra.crise_evenement.importance</code>. Niveau d'importance permettant de filtrer facilement
	 */
	public final TableField<Record, Integer> IMPORTANCE = createField("importance", org.jooq.impl.SQLDataType.INTEGER, this, "Niveau d'importance permettant de filtrer facilement");

	/**
	 * The column <code>remocra.crise_evenement.tags</code>. Tags permettant qualifier facilement un évènement
	 */
	public final TableField<Record, String> TAGS = createField("tags", org.jooq.impl.SQLDataType.VARCHAR, this, "Tags permettant qualifier facilement un évènement");

	/**
	 * The column <code>remocra.crise_evenement.crise</code>. Crise associée
	 */
	public final TableField<Record, Long> CRISE = createField("crise", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Crise associée");

	/**
	 * The column <code>remocra.crise_evenement.nature_evenement</code>. Nature d'évènement associée
	 */
	public final TableField<Record, Long> NATURE_EVENEMENT = createField("nature_evenement", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Nature d'évènement associée");

	/**
	 * Create a <code>remocra.crise_evenement</code> table reference
	 */
	public CriseEvenement() {
		this("crise_evenement", null);
	}

	/**
	 * Create an aliased <code>remocra.crise_evenement</code> table reference
	 */
	public CriseEvenement(String alias) {
		this(alias, CRISE_EVENEMENT);
	}

	private CriseEvenement(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private CriseEvenement(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Remocra.REMOCRA, aliased, parameters, "Evènement associé à une crise. Route inondée sur la RD 84 à la position ....");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<Record, Long> getIdentity() {
		return Keys.IDENTITY_CRISE_EVENEMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.CRISE_EVENEMENT_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.CRISE_EVENEMENT_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.CRISE_EVENEMENT__CRISE_EVENEMENT_CRISE_FK, Keys.CRISE_EVENEMENT__CRISE_EVENEMENT_NATURE_EVENEMENT_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CriseEvenement as(String alias) {
		return new CriseEvenement(alias, this);
	}

	/**
	 * Rename this table
	 */
	public CriseEvenement rename(String name) {
		return new CriseEvenement(name, null);
	}
}
