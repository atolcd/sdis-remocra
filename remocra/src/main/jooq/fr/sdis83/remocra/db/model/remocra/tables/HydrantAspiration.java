/**
 * This class is generated by jOOQ
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import com.vividsolutions.jts.geom.Geometry;

import fr.sdis83.remocra.db.converter.GeometryBinding;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Aspiration des PENA
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HydrantAspiration extends TableImpl<Record> {

	private static final long serialVersionUID = 2139207737;

	/**
	 * The reference instance of <code>remocra.hydrant_aspiration</code>
	 */
	public static final HydrantAspiration HYDRANT_ASPIRATION = new HydrantAspiration();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>remocra.hydrant_aspiration.id</code>. Identifiant interne
	 */
	public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "Identifiant interne");

	/**
	 * The column <code>remocra.hydrant_aspiration.numero</code>. Hauteur d'aspiration en mètres
	 */
	public final TableField<Record, String> NUMERO = createField("numero", org.jooq.impl.SQLDataType.VARCHAR, this, "Hauteur d'aspiration en mètres");

	/**
	 * The column <code>remocra.hydrant_aspiration.normalise</code>. Indique si l'hydrant est normalisé
	 */
	public final TableField<Record, Boolean> NORMALISE = createField("normalise", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "Indique si l'hydrant est normalisé");

	/**
	 * The column <code>remocra.hydrant_aspiration.hauteur</code>. Hauteur d'aspiration supérieure à 3 mètres
	 */
	public final TableField<Record, Boolean> HAUTEUR = createField("hauteur", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "Hauteur d'aspiration supérieure à 3 mètres");

	/**
	 * The column <code>remocra.hydrant_aspiration.type_aspiration</code>. Indentifiant du type d'aspiration
	 */
	public final TableField<Record, Long> TYPE_ASPIRATION = createField("type_aspiration", org.jooq.impl.SQLDataType.BIGINT, this, "Indentifiant du type d'aspiration");

	/**
	 * The column <code>remocra.hydrant_aspiration.deporte</code>. Indique si le dispositif d'aspiration est à proximité ou déporté
	 */
	public final TableField<Record, Boolean> DEPORTE = createField("deporte", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "Indique si le dispositif d'aspiration est à proximité ou déporté");

	/**
	 * The column <code>remocra.hydrant_aspiration.geometrie</code>. Coordonnées du dispositif d'aspiration
	 */
	public final TableField<Record, Geometry> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), this, "Coordonnées du dispositif d'aspiration", new GeometryBinding());

	/**
	 * The column <code>remocra.hydrant_aspiration.pena</code>. PENA auquel le dispositif est lié
	 */
	public final TableField<Record, Long> PENA = createField("pena", org.jooq.impl.SQLDataType.BIGINT, this, "PENA auquel le dispositif est lié");

	/**
	 * The column <code>remocra.hydrant_aspiration.version</code>.
	 */
	public final TableField<Record, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.defaulted(true), this, "");

	/**
	 * Create a <code>remocra.hydrant_aspiration</code> table reference
	 */
	public HydrantAspiration() {
		this("hydrant_aspiration", null);
	}

	/**
	 * Create an aliased <code>remocra.hydrant_aspiration</code> table reference
	 */
	public HydrantAspiration(String alias) {
		this(alias, HYDRANT_ASPIRATION);
	}

	private HydrantAspiration(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private HydrantAspiration(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Remocra.REMOCRA, aliased, parameters, "Aspiration des PENA");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<Record, Long> getIdentity() {
		return Keys.IDENTITY_HYDRANT_ASPIRATION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.HYDRANT_ASPIRATION_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.HYDRANT_ASPIRATION_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.HYDRANT_ASPIRATION__FK_TYPE_ASPIRATION, Keys.HYDRANT_ASPIRATION__FK_PENA);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public HydrantAspiration as(String alias) {
		return new HydrantAspiration(alias, this);
	}

	/**
	 * Rename this table
	 */
	public HydrantAspiration rename(String name) {
		return new HydrantAspiration(name, null);
	}
}
