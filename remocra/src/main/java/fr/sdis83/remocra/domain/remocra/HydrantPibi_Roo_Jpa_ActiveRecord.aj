// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.sdis83.remocra.domain.remocra;

import fr.sdis83.remocra.domain.remocra.HydrantPibi;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect HydrantPibi_Roo_Jpa_ActiveRecord {
    
    public static final List<String> HydrantPibi.fieldNames4OrderClauseFilter = java.util.Arrays.asList("diametre", "debit", "debitMax", "pression", "pressionDyn", "pressionDynDeb", "gestReseau", "numeroSCP", "renversable", "marque", "modele", "pena");
    
    public static long HydrantPibi.countHydrantPibis() {
        return entityManager().createQuery("SELECT COUNT(o) FROM HydrantPibi o", Long.class).getSingleResult();
    }
    
    public static List<HydrantPibi> HydrantPibi.findAllHydrantPibis() {
        return entityManager().createQuery("SELECT o FROM HydrantPibi o", HydrantPibi.class).getResultList();
    }
    
    public static List<HydrantPibi> HydrantPibi.findAllHydrantPibis(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM HydrantPibi o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, HydrantPibi.class).getResultList();
    }
    
    public static HydrantPibi HydrantPibi.findHydrantPibi(Long id) {
        if (id == null) return null;
        return entityManager().find(HydrantPibi.class, id);
    }
    
    public static List<HydrantPibi> HydrantPibi.findHydrantPibiEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM HydrantPibi o", HydrantPibi.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<HydrantPibi> HydrantPibi.findHydrantPibiEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM HydrantPibi o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, HydrantPibi.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public HydrantPibi HydrantPibi.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        HydrantPibi merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
