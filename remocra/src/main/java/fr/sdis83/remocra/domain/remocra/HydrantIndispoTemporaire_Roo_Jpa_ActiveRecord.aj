// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.sdis83.remocra.domain.remocra;


import fr.sdis83.remocra.domain.remocra.HydrantIndispoTemporaire;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.transaction.annotation.Transactional;

privileged aspect HydrantIndispoTemporaire_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager HydrantIndispoTemporaire.entityManager;
    
    public static final List<String> HydrantIndispoTemporaire.fieldNames4OrderClauseFilter = java.util.Arrays.asList("id", "dateDebut", "dateFin", "motif", "dateRappelFin", "dateRappelDebut", "basculeAutoIndispo", "basculeAutoDispo", "melAvantIndispo", "melAvantDispo", "totalHydrants");


    public static final EntityManager HydrantIndispoTemporaire.entityManager() {
        EntityManager em = new HydrantIndispoTemporaire().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long HydrantIndispoTemporaire.countHydrantIndispoTemporaires() {
        return entityManager().createQuery("SELECT COUNT(o) FROM HydrantIndispoTemporaire o", Long.class).getSingleResult();
    }
    
    public static List<HydrantIndispoTemporaire> HydrantIndispoTemporaire.findAllHydrantIndispoTemporaires() {
        return entityManager().createQuery("SELECT o FROM HydrantIndispoTemporaire o", HydrantIndispoTemporaire.class).getResultList();
    }
    
    public static List<HydrantIndispoTemporaire> HydrantIndispoTemporaire.findAllHydrantIndispoTemporaires(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM HydrantIndispoTemporaire o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, HydrantIndispoTemporaire.class).getResultList();
    }
    
    public static HydrantIndispoTemporaire HydrantIndispoTemporaire.findHydrantIndispoTemporaire(Long id) {
        if (id == null) return null;
        return entityManager().find(HydrantIndispoTemporaire.class, id);
    }
    
    public static List<HydrantIndispoTemporaire> HydrantIndispoTemporaire.findHydrantIndispoTemporaireEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM HydrantIndispoTemporaire o", HydrantIndispoTemporaire.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<HydrantIndispoTemporaire> HydrantIndispoTemporaire.findHydrantIndispoTemporaireEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM HydrantIndispoTemporaire o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, HydrantIndispoTemporaire.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void HydrantIndispoTemporaire.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void HydrantIndispoTemporaire.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            HydrantIndispoTemporaire attached = HydrantIndispoTemporaire.findHydrantIndispoTemporaire(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void HydrantIndispoTemporaire.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void HydrantIndispoTemporaire.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public HydrantIndispoTemporaire HydrantIndispoTemporaire.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        HydrantIndispoTemporaire merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
