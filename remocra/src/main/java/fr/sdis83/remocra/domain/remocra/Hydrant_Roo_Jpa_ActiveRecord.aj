// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.sdis83.remocra.domain.remocra;

import fr.sdis83.remocra.domain.remocra.Hydrant;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Hydrant_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Hydrant.entityManager;
    
    public static final List<String> Hydrant.fieldNames4OrderClauseFilter = java.util.Arrays.asList("TITRE_PHOTO", "id", "version", "code", "tournees", "geometrie", "jsonGeometrie", "nature", "numero", "numeroInterne", "zoneSpeciale", "dateRecep", "dateReco", "dateContr", "dateCrea", "dateVerif", "dateModification", "dateGps", "dateAttestation", "agent1", "agent2", "organisme", "lieuDit", "commune", "voie", "voie2", "complement", "anneeFabrication", "hydrantDocuments", "courrier", "domaine", "gestPointEau", "observation", "anomalies", "dispoTerrestre", "dispoHbe", "dispoAdmin", "natureDeci");
    
    public static final EntityManager Hydrant.entityManager() {
        EntityManager em = new Hydrant().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Hydrant.hydrantCount() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Hydrant o", Long.class).getSingleResult();
    }
    
    public static List<Hydrant> Hydrant.findAllHydrants() {
        return entityManager().createQuery("SELECT o FROM Hydrant o", Hydrant.class).getResultList();
    }
    
    public static List<Hydrant> Hydrant.findAllHydrants(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Hydrant o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Hydrant.class).getResultList();
    }
    
    public static Hydrant Hydrant.findHydrant(Long id) {
        if (id == null) return null;
        return entityManager().find(Hydrant.class, id);
    }
    
    public static List<Hydrant> Hydrant.findHydrantEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Hydrant o", Hydrant.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Hydrant> Hydrant.findHydrantEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Hydrant o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Hydrant.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Hydrant.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Hydrant.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Hydrant attached = Hydrant.findHydrant(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Hydrant.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Hydrant.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Hydrant Hydrant.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Hydrant merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
