#!/usr/bin/env groovy
library "atolcd-jenkins"
// uid / gid de l'utilisateur Docker
def DOCKER_UID = 2000
def DOCKER_GID = 2000
pipeline {
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }
  parameters {
    // Version de l'application
    string(name: 'COMMIT_TO_BUILD', defaultValue: 'master', description: 'Commit, branche ou tag')
    // Version de l'application
    string(name: 'REMOCRA_VERSION', description: 'Version du package')
  }
  agent {
    label 'release'
  }
  stages {
    stage('Dependencies') {
      failFast true
      parallel {
        stage('Dependencies geoserver') {
          steps {
            downloadRawNexus(repository: 'sdis-remocra', outputDir: 'docker/geoserver/ext/', onlyIfAbsent: true, remoteFiles: [
              'ext/geoserver-2.16.2-bin.zip',
              'ext/geoserver-2.16.2-querylayer-plugin.zip',
              'ext/jai-1_1_3-lib-linux-amd64.tar.gz',
              'ext/jai_imageio-1_1-lib-linux-amd64.tar.gz',
            ])
          }
        }
        stage('Dependencies pdi-4.4-dkron') {
          steps {
            downloadRawNexus(repository: 'sdis-remocra', outputDir: 'docker/pdi-4.4-dkron/ext/', onlyIfAbsent: true, remoteFiles: [
              'ext/pdi-ce-4.4.0-stable.zip',
              'ext/pentaho-4.4-remocra-deps.zip',
              'ext/postgresql-42.2.10.jre7.jar',
              'ext/dkron_2.1.1_linux_amd64.tar.gz',
            ])
          }
        }
        stage('Dependencies pdi-dkron') {
          steps {
            downloadRawNexus(repository: 'sdis-remocra', outputDir: 'docker/pdi-dkron/ext/', onlyIfAbsent: true, remoteFiles: [
              'ext/pdi-ce-7.1.0.0-12.zip',
              'ext/pentaho-gis-plugins-1.2.1-bin-7.zip',
              'ext/ojdbc8.jar',
              'ext/dkron_2.1.1_linux_amd64.tar.gz',
              'ext/jtds-1.3.1.jar',
            ])
          }
        }
      }
    }
    stage('Build') {
      failFast true
      parallel {
        stage('Build docker remocra') {
          stages {
            stage('Build client-ng') {
              steps {
                nodejsInsideDocker(imageVersion: '10') {
                  dir('client-ng') {
                    sh '''
                      npm install
                      npm run build
                      '''
                  }
                }
              }
              post {
                always {
                  sh 'rm -rf client-ng/node_modules/'
                }
              }
            }
            stage('Build remocra') {
              steps {
                mavenInsideDocker(imageName: 'cvagner/docker-jdk-maven-sencha-cmd', imageVersion: '8-3.6.3-3.0.2') {
                  sh '''
                    mvn -e -U -ntp -Dskip.installnodenpm -Dskip.npm clean verify -P modeinfo-able -P update
                    cp -r ./remocra/target/remocra.war ./docker/remocra/ext
                    '''
                }
              }
            }
            stage('Build docker remocra') {
              steps {
                dockerBuildAndPublish(imageName: "client-docker-registry.atolcd.com/atolcd/remocra:$REMOCRA_VERSION",
                  buildDir: 'docker/remocra',
                  buildArgs: [
                    UID: DOCKER_UID,
                    GID: DOCKER_GID
                  ],
                  extraTags: [ 'latest' ])
              }
            }
          }
        }
        stage('Build docker geoserver') {
          steps {
            dockerBuildAndPublish(imageName: "client-docker-registry.atolcd.com/atolcd/remocra-geoserver:$REMOCRA_VERSION",
              buildDir: 'docker/geoserver',
              buildArgs: [
                UID: DOCKER_UID,
                GID: DOCKER_GID
              ],
              extraTags: [ 'latest' ])
          }
        }
        stage('Build docker pdi-4.4-dkron') {
          steps {
            dockerBuildAndPublish(imageName: "client-docker-registry.atolcd.com/atolcd/remocra-pdi-4.4-dkron:$REMOCRA_VERSION",
              buildDir: 'docker/pdi-4.4-dkron',
              buildArgs: [
                UID: DOCKER_UID,
                GID: DOCKER_GID
              ],
              extraTags: [ 'latest' ])
          }
        }
        stage('Build docker pdi-dkron') {
          steps {
            dockerBuildAndPublish(imageName: "client-docker-registry.atolcd.com/atolcd/remocra-pdi-dkron:$REMOCRA_VERSION",
              buildDir: 'docker/pdi-dkron',
              buildArgs: [
                UID: DOCKER_UID,
                GID: DOCKER_GID
              ],
              extraTags: [ 'latest' ])
          }
        }
        stage('Build docker api-remocra') {
          stages {
            stage('Build api-remocra') {
              steps {
                dir('api-remocra') {
                  mavenInsideDocker(imageVersion: '3-jdk-11') {
                    sh '''
                      mvn -e -U -ntp clean verify
                      '''
                  }
                }
              }
            }
            stage('Build docker api-remocra') {
              steps {
                dockerBuildAndPublish(imageName: "client-docker-registry.atolcd.com/atolcd/remocra-api-remocra:$REMOCRA_VERSION",
                  dockerfile: 'api-remocra/dist/Dockerfile',
                  buildDir: 'api-remocra',
                  buildArgs: [
                    UID: DOCKER_UID,
                    GID: DOCKER_GID
                  ],
                  extraTags: [ 'latest' ])
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      sh '''
        git checkout -- .
        git clean -f -d -x -e .m2/ -e .cache/npm/ -e docker/geoserver/ext -e docker/pdi-4.4-dkron/ext -e docker/pdi-dkron/ext
        '''
    }
  }
}
