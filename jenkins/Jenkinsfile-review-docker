#!/usr/bin/env groovy
def user_id
def group_id
node {
  // uid / gid de l'utilisateur courant
  user_id = sh(returnStdout: true, script: 'id -u').trim()
  group_id = sh(returnStdout: true, script: 'id -g').trim()
  // uid / gid de l'utilisateur Docker
  DOCKER_UID = 2000
  DOCKER_GID = 2000
}
pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }
  agent any
  stages {
    stage('Get version') {
      steps {
        script {
          REMOCRA_GIT_VERSION = sh(returnStdout: true, script: 'git describe --all').trim()
          REMOCRA_POM_VERSION = sh(returnStdout: true, script: 'cat pom.xml | grep "<version" | sed "s%<version>%%g"| sed "s%</version>%%g" | sed "s% %%g"').trim()
          // On retient la version du pom
          REMOCRA_VERSION = REMOCRA_POM_VERSION
          echo "Version ( git , pom ) ➔ retained : ( ${REMOCRA_GIT_VERSION} , ${REMOCRA_POM_VERSION} ) ➔ ${REMOCRA_VERSION}"
        }
      }
    }
    stage('Build') {
      failFast true
      parallel {
        stage('Build docker remocra') {
          steps {
            script {
              docker.image('cvagner/docker-jdk-maven-sencha-cmd:8-3.6.3-3.0.2')
                .inside("-u ${user_id}:${group_id} -w /app -v ${pwd()}:/app -v /var/lib/jenkins:/var/maven -e HOME=/var/maven -e MAVEN_CONFIG=/var/maven/.m2 -e MAVEN_OPTS='-Duser.home=/var/maven'") {
                sh 'mvn clean verify -P modeinfo-able -P update'
                sh 'cp -r ./remocra/target/remocra.war ./docker/remocra/ext'
              }
            }
            script {
              remocra_image = docker.build(
                'atolcd/remocra',
                "--build-arg UID=${DOCKER_UID} --build-arg GID=${DOCKER_GID} --force-rm -f ./docker/remocra/Dockerfile ./docker/remocra"
              )
            }
          }
        }
        stage('Build docker geoserver') {
          steps {
            script {
              geoserver_image = docker.build(
                'atolcd/remocra-geoserver',
                "--build-arg UID=${DOCKER_UID} --build-arg GID=${DOCKER_GID} --force-rm -f ./docker/geoserver/Dockerfile ./docker/geoserver"
              )
            }
          }
        }
        stage('Build docker pdi-4.4-dkron') {
          steps {
            script {
              pdi44dkron_image = docker.build(
                'atolcd/remocra-pdi-4.4-dkron',
                "--build-arg UID=${DOCKER_UID} --build-arg GID=${DOCKER_GID} --force-rm -f ./docker/pdi-4.4-dkron/Dockerfile ./docker/pdi-4.4-dkron"
              )
            }
          }
        }
        stage('Build docker pdi-dkron') {
          steps {
            script {
              pdidkron_image = docker.build(
                'atolcd/remocra-pdi-dkron',
                "--build-arg UID=${DOCKER_UID} --build-arg GID=${DOCKER_GID} --force-rm -f ./docker/pdi-dkron/Dockerfile ./docker/pdi-dkron"
              )
            }
          }
        }
      }
    }
    // review : pas de push
    stage('Clean') {
      failFast true
      parallel {
        stage('Clean workspace') {
          steps {
            sh 'git checkout -- .'
            sh 'git clean -f -d -x -e client-ng/node_modules'
          }
        }
        stage('Delete image remocra') {
          steps {
            script {
              if (remocra_image) {
                sh "docker rmi -f ${remocra_image.id}"
              }
            }
          }
        }
        stage('Delete image geoserver') {
          steps {
            script {
              if (geoserver_image) {
                sh "docker rmi -f ${geoserver_image.id}"
              }
            }
          }
        }
        stage('Delete image pdi-4.4-dkron') {
          steps {
            script {
              if (pdi44dkron_image) {
                sh "docker rmi -f ${pdi44dkron_image.id}"
              }
            }
          }
        }
        stage('Delete image pdi-dkron') {
          steps {
            script {
              if (remocra_image) {
                sh "docker rmi -f ${pdidkron_image.id}"
              }
            }
          }
        }
      }
    }
  }
}
