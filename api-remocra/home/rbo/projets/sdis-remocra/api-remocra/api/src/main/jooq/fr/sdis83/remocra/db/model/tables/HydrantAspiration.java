/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Aspiration des PENA
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HydrantAspiration extends TableImpl<Record> {

    private static final long serialVersionUID = -486623196;

    /**
     * The reference instance of <code>remocra.hydrant_aspiration</code>
     */
    public static final HydrantAspiration HYDRANT_ASPIRATION = new HydrantAspiration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.hydrant_aspiration.id</code>. Identifiant interne
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.hydrant_aspiration_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne");

    /**
     * The column <code>remocra.hydrant_aspiration.numero</code>. Hauteur d'aspiration en mètres
     */
    public final TableField<Record, String> NUMERO = createField("numero", org.jooq.impl.SQLDataType.VARCHAR, this, "Hauteur d'aspiration en mètres");

    /**
     * The column <code>remocra.hydrant_aspiration.normalise</code>. Indique si l'hydrant est normalisé
     */
    public final TableField<Record, Boolean> NORMALISE = createField("normalise", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Indique si l'hydrant est normalisé");

    /**
     * The column <code>remocra.hydrant_aspiration.hauteur</code>. Hauteur d'aspiration supérieure à 3 mètres
     */
    public final TableField<Record, Boolean> HAUTEUR = createField("hauteur", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Hauteur d'aspiration supérieure à 3 mètres");

    /**
     * The column <code>remocra.hydrant_aspiration.type_aspiration</code>. Indentifiant du type d'aspiration
     */
    public final TableField<Record, Long> TYPE_ASPIRATION = createField("type_aspiration", org.jooq.impl.SQLDataType.BIGINT, this, "Indentifiant du type d'aspiration");

    /**
     * The column <code>remocra.hydrant_aspiration.deporte</code>. Indique si le dispositif d'aspiration est à proximité ou déporté
     */
    public final TableField<Record, Boolean> DEPORTE = createField("deporte", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Indique si le dispositif d'aspiration est à proximité ou déporté");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<Record, Object> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "Coordonnées du dispositif d'aspiration");

    /**
     * The column <code>remocra.hydrant_aspiration.pena</code>. PENA auquel le dispositif est lié
     */
    public final TableField<Record, Long> PENA = createField("pena", org.jooq.impl.SQLDataType.BIGINT, this, "PENA auquel le dispositif est lié");

    /**
     * The column <code>remocra.hydrant_aspiration.version</code>.
     */
    public final TableField<Record, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>remocra.hydrant_aspiration</code> table reference
     */
    public HydrantAspiration() {
        this(DSL.name("hydrant_aspiration"), null);
    }

    /**
     * Create an aliased <code>remocra.hydrant_aspiration</code> table reference
     */
    public HydrantAspiration(String alias) {
        this(DSL.name(alias), HYDRANT_ASPIRATION);
    }

    /**
     * Create an aliased <code>remocra.hydrant_aspiration</code> table reference
     */
    public HydrantAspiration(Name alias) {
        this(alias, HYDRANT_ASPIRATION);
    }

    private HydrantAspiration(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private HydrantAspiration(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Aspiration des PENA"));
    }

    public <O extends Record> HydrantAspiration(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, HYDRANT_ASPIRATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HYDRANT_ASPIRATION_PENA_IDX, Indexes.HYDRANT_ASPIRATION_PKEY, Indexes.HYDRANT_ASPIRATION_TYPE_ASPIRATION_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_HYDRANT_ASPIRATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.HYDRANT_ASPIRATION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.HYDRANT_ASPIRATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.HYDRANT_ASPIRATION__FK_TYPE_ASPIRATION, Keys.HYDRANT_ASPIRATION__FK_PENA);
    }

    public TypeHydrantAspiration typeHydrantAspiration() {
        return new TypeHydrantAspiration(this, Keys.HYDRANT_ASPIRATION__FK_TYPE_ASPIRATION);
    }

    public HydrantPena hydrantPena() {
        return new HydrantPena(this, Keys.HYDRANT_ASPIRATION__FK_PENA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantAspiration as(String alias) {
        return new HydrantAspiration(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantAspiration as(Name alias) {
        return new HydrantAspiration(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantAspiration rename(String name) {
        return new HydrantAspiration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantAspiration rename(Name name) {
        return new HydrantAspiration(name, null);
    }
}
