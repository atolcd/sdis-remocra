/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HydrantPena extends TableImpl<Record> {

    private static final long serialVersionUID = 795086762;

    /**
     * The reference instance of <code>remocra.hydrant_pena</code>
     */
    public static final HydrantPena HYDRANT_PENA = new HydrantPena();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.hydrant_pena.capacite</code>.
     */
    public final TableField<Record, String> CAPACITE = createField("capacite", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_pena.coorddfci</code>.
     */
    public final TableField<Record, String> COORDDFCI = createField("coorddfci", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_pena.hbe</code>.
     */
    public final TableField<Record, Boolean> HBE = createField("hbe", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>remocra.hydrant_pena.piste</code>.
     */
    public final TableField<Record, String> PISTE = createField("piste", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_pena.id</code>.
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>remocra.hydrant_pena.materiau</code>.
     */
    public final TableField<Record, Long> MATERIAU = createField("materiau", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_pena.positionnement</code>.
     */
    public final TableField<Record, Long> POSITIONNEMENT = createField("positionnement", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_pena.vol_constate</code>.
     */
    public final TableField<Record, Long> VOL_CONSTATE = createField("vol_constate", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_pena.q_appoint</code>.
     */
    public final TableField<Record, Double> Q_APPOINT = createField("q_appoint", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>remocra.hydrant_pena.illimitee</code>. Indique si la capacite du PENA est illimitée
     */
    public final TableField<Record, Boolean> ILLIMITEE = createField("illimitee", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Indique si la capacite du PENA est illimitée");

    /**
     * The column <code>remocra.hydrant_pena.incertaine</code>. Indique si la capacite du PENA est incertaine
     */
    public final TableField<Record, Boolean> INCERTAINE = createField("incertaine", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Indique si la capacite du PENA est incertaine");

    /**
     * Create a <code>remocra.hydrant_pena</code> table reference
     */
    public HydrantPena() {
        this(DSL.name("hydrant_pena"), null);
    }

    /**
     * Create an aliased <code>remocra.hydrant_pena</code> table reference
     */
    public HydrantPena(String alias) {
        this(DSL.name(alias), HYDRANT_PENA);
    }

    /**
     * Create an aliased <code>remocra.hydrant_pena</code> table reference
     */
    public HydrantPena(Name alias) {
        this(alias, HYDRANT_PENA);
    }

    private HydrantPena(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private HydrantPena(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> HydrantPena(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, HYDRANT_PENA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HYDRANT_PENA_MATERIAU_IDX, Indexes.HYDRANT_PENA_PKEY, Indexes.HYDRANT_PENA_POSITIONNEMENT_IDX, Indexes.HYDRANT_PENA_VOL_CONSTATE_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.HYDRANT_PENA_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.HYDRANT_PENA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.HYDRANT_PENA__FKD60E141FB34721EF, Keys.HYDRANT_PENA__FKD60E141FE51486BA, Keys.HYDRANT_PENA__FKD60E141F7DC71CD6, Keys.HYDRANT_PENA__FKD60E141F8AC9C5E3);
    }

    public Hydrant hydrant() {
        return new Hydrant(this, Keys.HYDRANT_PENA__FKD60E141FB34721EF);
    }

    public TypeHydrantMateriau typeHydrantMateriau() {
        return new TypeHydrantMateriau(this, Keys.HYDRANT_PENA__FKD60E141FE51486BA);
    }

    public TypeHydrantPositionnement typeHydrantPositionnement() {
        return new TypeHydrantPositionnement(this, Keys.HYDRANT_PENA__FKD60E141F7DC71CD6);
    }

    public TypeHydrantVolConstate typeHydrantVolConstate() {
        return new TypeHydrantVolConstate(this, Keys.HYDRANT_PENA__FKD60E141F8AC9C5E3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantPena as(String alias) {
        return new HydrantPena(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantPena as(Name alias) {
        return new HydrantPena(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantPena rename(String name) {
        return new HydrantPena(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantPena rename(Name name) {
        return new HydrantPena(name, null);
    }
}
