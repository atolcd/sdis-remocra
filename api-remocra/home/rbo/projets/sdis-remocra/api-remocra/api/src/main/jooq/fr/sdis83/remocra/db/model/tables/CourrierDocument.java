/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.converter.TimestampToInstantConverter;
import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Courrier adressé à un destinataire unique référençant un document présent 
 * sur le système. Ce document peut donner lieu à un accusé de téléchargement
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CourrierDocument extends TableImpl<Record> {

    private static final long serialVersionUID = -568014780;

    /**
     * The reference instance of <code>remocra.courrier_document</code>
     */
    public static final CourrierDocument COURRIER_DOCUMENT = new CourrierDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.courrier_document.id</code>. Identifiant interne autogénéré
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.courrier_document_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne autogénéré");

    /**
     * The column <code>remocra.courrier_document.document</code>. Référence au document
     */
    public final TableField<Record, Long> DOCUMENT = createField("document", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Référence au document");

    /**
     * The column <code>remocra.courrier_document.code</code>. Code unique exploité pour l'accusé de téléchargement
     */
    public final TableField<Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("md5(((('courrier-destinataire-'::text || (now())::text) || '-'::text) || floor(((random() * (10000)::double precision) + (1)::double precision))))", org.jooq.impl.SQLDataType.VARCHAR)), this, "Code unique exploité pour l'accusé de téléchargement");

    /**
     * The column <code>remocra.courrier_document.nom_destinataire</code>. Indication sur le destinataire du courrier.
     */
    public final TableField<Record, String> NOM_DESTINATAIRE = createField("nom_destinataire", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Indication sur le destinataire du courrier.");

    /**
     * The column <code>remocra.courrier_document.type_destinataire</code>. Indication sur le type de destinataire du courrier. Organisme = ORGANISME, utilisateur = UTILISATEUR, autre = AUTRE
     */
    public final TableField<Record, String> TYPE_DESTINATAIRE = createField("type_destinataire", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Indication sur le type de destinataire du courrier. Organisme = ORGANISME, utilisateur = UTILISATEUR, autre = AUTRE");

    /**
     * The column <code>remocra.courrier_document.id_destinataire</code>. Identifiant du destinataire du courrier dans la base Remocra quand le type = ORGANISME ou UTILISATEUR
     */
    public final TableField<Record, Long> ID_DESTINATAIRE = createField("id_destinataire", org.jooq.impl.SQLDataType.BIGINT, this, "Identifiant du destinataire du courrier dans la base Remocra quand le type = ORGANISME ou UTILISATEUR");

    /**
     * The column <code>remocra.courrier_document.accuse</code>. Date et heure d'accusé de téléchargement
     */
    public final TableField<Record, Instant> ACCUSE = createField("accuse", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Date et heure d'accusé de téléchargement", new TimestampToInstantConverter());

    /**
     * The column <code>remocra.courrier_document.objet</code>.
     */
    public final TableField<Record, String> OBJET = createField("objet", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.courrier_document.reference</code>.
     */
    public final TableField<Record, String> REFERENCE = createField("reference", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.courrier_document.expediteur</code>.
     */
    public final TableField<Record, String> EXPEDITEUR = createField("expediteur", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("'Application Remocra'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>remocra.courrier_document</code> table reference
     */
    public CourrierDocument() {
        this(DSL.name("courrier_document"), null);
    }

    /**
     * Create an aliased <code>remocra.courrier_document</code> table reference
     */
    public CourrierDocument(String alias) {
        this(DSL.name(alias), COURRIER_DOCUMENT);
    }

    /**
     * Create an aliased <code>remocra.courrier_document</code> table reference
     */
    public CourrierDocument(Name alias) {
        this(alias, COURRIER_DOCUMENT);
    }

    private CourrierDocument(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CourrierDocument(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Courrier adressé à un destinataire unique référençant un document présent sur le système. Ce document peut donner lieu à un accusé de téléchargement"));
    }

    public <O extends Record> CourrierDocument(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, COURRIER_DOCUMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COURRIER_DOCUMENT_DOCUMENT_IDX, Indexes.COURRIER_DOCUMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_COURRIER_DOCUMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.COURRIER_DOCUMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.COURRIER_DOCUMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.COURRIER_DOCUMENT__COURRIER_DOCUMENT_DOCUMENT_FK);
    }

    public Document document() {
        return new Document(this, Keys.COURRIER_DOCUMENT__COURRIER_DOCUMENT_DOCUMENT_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CourrierDocument as(String alias) {
        return new CourrierDocument(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CourrierDocument as(Name alias) {
        return new CourrierDocument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CourrierDocument rename(String name) {
        return new CourrierDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CourrierDocument rename(Name name) {
        return new CourrierDocument(name, null);
    }
}
