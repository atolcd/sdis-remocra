/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Modèle de requête exploité par REMOCRA
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RequeteModele extends TableImpl<Record> {

    private static final long serialVersionUID = -652250483;

    /**
     * The reference instance of <code>remocra.requete_modele</code>
     */
    public static final RequeteModele REQUETE_MODELE = new RequeteModele();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.requete_modele.id</code>. Identifiant interne auto-généré
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.requete_modele_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne auto-généré");

    /**
     * The column <code>remocra.requete_modele.categorie</code>. Libellé de catégorie permettant de regrouper ou de filtrer potentiellement les modèles selon un thème. Non exploité actuellement dans REMOCRA
     */
    public final TableField<Record, String> CATEGORIE = createField("categorie", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Libellé de catégorie permettant de regrouper ou de filtrer potentiellement les modèles selon un thème. Non exploité actuellement dans REMOCRA");

    /**
     * The column <code>remocra.requete_modele.code</code>. Code permettant d'identifier de manière unique et pérenne un modèle de requête
     */
    public final TableField<Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Code permettant d'identifier de manière unique et pérenne un modèle de requête");

    /**
     * The column <code>remocra.requete_modele.libelle</code>. Libellé affiché en liste déroulante lors du choix du modèle de requête
     */
    public final TableField<Record, String> LIBELLE = createField("libelle", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Libellé affiché en liste déroulante lors du choix du modèle de requête");

    /**
     * The column <code>remocra.requete_modele.description</code>. Description longue du modèle de requête. Non exploité actuellement dans ReMOCRA
     */
    public final TableField<Record, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "Description longue du modèle de requête. Non exploité actuellement dans ReMOCRA");

    /**
     * The column <code>remocra.requete_modele.spatial</code>. Le résultat possède une colonne nommée "wkt" contenant de l'information géographique encodée au format WKT
     */
    public final TableField<Record, Boolean> SPATIAL = createField("spatial", org.jooq.impl.SQLDataType.BOOLEAN, this, "Le résultat possède une colonne nommée \"wkt\" contenant de l'information géographique encodée au format WKT");

    /**
     * The column <code>remocra.requete_modele.source_sql</code>. Definition de la requête SQL à exécuter sur la base de données REMOCRA pour fournir les informations à retourner. A renseigner dans un CDATA. La requête peut exploiter des paramètres sous la forme ${NOM_DU_PARAMETRE}. Chaque paramètre mentionné doit être référencé dans la table "requete_modele_parametre"
     */
    public final TableField<Record, String> SOURCE_SQL = createField("source_sql", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Definition de la requête SQL à exécuter sur la base de données REMOCRA pour fournir les informations à retourner. A renseigner dans un CDATA. La requête peut exploiter des paramètres sous la forme ${NOM_DU_PARAMETRE}. Chaque paramètre mentionné doit être référencé dans la table \"requete_modele_parametre\"");

    /**
     * Create a <code>remocra.requete_modele</code> table reference
     */
    public RequeteModele() {
        this(DSL.name("requete_modele"), null);
    }

    /**
     * Create an aliased <code>remocra.requete_modele</code> table reference
     */
    public RequeteModele(String alias) {
        this(DSL.name(alias), REQUETE_MODELE);
    }

    /**
     * Create an aliased <code>remocra.requete_modele</code> table reference
     */
    public RequeteModele(Name alias) {
        this(alias, REQUETE_MODELE);
    }

    private RequeteModele(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private RequeteModele(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Modèle de requête exploité par REMOCRA"));
    }

    public <O extends Record> RequeteModele(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REQUETE_MODELE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REQUETE_MODELE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_REQUETE_MODELE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.REQUETE_MODELE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.REQUETE_MODELE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RequeteModele as(String alias) {
        return new RequeteModele(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RequeteModele as(Name alias) {
        return new RequeteModele(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RequeteModele rename(String name) {
        return new RequeteModele(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RequeteModele rename(Name name) {
        return new RequeteModele(name, null);
    }
}
