/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Serveur de données géographique interrogeable à la norme OGC
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OgcSource extends TableImpl<Record> {

    private static final long serialVersionUID = -1815843804;

    /**
     * The reference instance of <code>remocra.ogc_source</code>
     */
    public static final OgcSource OGC_SOURCE = new OgcSource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.ogc_source.id</code>. Identifiant interne
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.ogc_source_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne");

    /**
     * The column <code>remocra.ogc_source.url</code>. Url d'accès au service. Doit fournir des informations en retour d'une requête de type GetCapabilities sur un service de type WMS ou WMTS
     */
    public final TableField<Record, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Url d'accès au service. Doit fournir des informations en retour d'une requête de type GetCapabilities sur un service de type WMS ou WMTS");

    /**
     * Create a <code>remocra.ogc_source</code> table reference
     */
    public OgcSource() {
        this(DSL.name("ogc_source"), null);
    }

    /**
     * Create an aliased <code>remocra.ogc_source</code> table reference
     */
    public OgcSource(String alias) {
        this(DSL.name(alias), OGC_SOURCE);
    }

    /**
     * Create an aliased <code>remocra.ogc_source</code> table reference
     */
    public OgcSource(Name alias) {
        this(alias, OGC_SOURCE);
    }

    private OgcSource(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private OgcSource(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Serveur de données géographique interrogeable à la norme OGC"));
    }

    public <O extends Record> OgcSource(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, OGC_SOURCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OGC_SOURCE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_OGC_SOURCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.OGC_SOURCE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.OGC_SOURCE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OgcSource as(String alias) {
        return new OgcSource(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OgcSource as(Name alias) {
        return new OgcSource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OgcSource rename(String name) {
        return new OgcSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OgcSource rename(Name name) {
        return new OgcSource(name, null);
    }
}
