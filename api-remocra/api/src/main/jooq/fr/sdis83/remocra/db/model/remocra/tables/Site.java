/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Site de PEI
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Site extends TableImpl<Record> {

    private static final long serialVersionUID = 1487599515;

    /**
     * The reference instance of <code>remocra.site</code>
     */
    public static final Site SITE = new Site();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.site.id</code>. Identifiant interne
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.site_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne");

    /**
     * The column <code>remocra.site.actif</code>. Sélectionnable dans l'interface
     */
    public final TableField<Record, Boolean> ACTIF = createField("actif", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Sélectionnable dans l'interface");

    /**
     * The column <code>remocra.site.code</code>. Code du statut. Facilite les échanges de données
     */
    public final TableField<Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Code du statut. Facilite les échanges de données");

    /**
     * The column <code>remocra.site.nom</code>. Libellé du site
     */
    public final TableField<Record, String> NOM = createField("nom", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Libellé du site");

    /**
     * The column <code>remocra.site.version</code>.
     */
    public final TableField<Record, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>remocra.site.gestionnaire_site</code>. Identifiant du gestionnaire de site auquel est rattaché le site
     */
    public final TableField<Record, Long> GESTIONNAIRE_SITE = createField("gestionnaire_site", org.jooq.impl.SQLDataType.BIGINT, this, "Identifiant du gestionnaire de site auquel est rattaché le site");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<Record, Object> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "");

    /**
     * Create a <code>remocra.site</code> table reference
     */
    public Site() {
        this(DSL.name("site"), null);
    }

    /**
     * Create an aliased <code>remocra.site</code> table reference
     */
    public Site(String alias) {
        this(DSL.name(alias), SITE);
    }

    /**
     * Create an aliased <code>remocra.site</code> table reference
     */
    public Site(Name alias) {
        this(alias, SITE);
    }

    private Site(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Site(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Site de PEI"));
    }

    public <O extends Record> Site(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SITE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SITE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_SITE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.SITE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.SITE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.SITE__FK_GESTIONNAIRE_SITE);
    }

    public GestionnaireSite gestionnaireSite() {
        return new GestionnaireSite(this, Keys.SITE__FK_GESTIONNAIRE_SITE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Site as(String alias) {
        return new Site(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Site as(Name alias) {
        return new Site(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Site rename(String name) {
        return new Site(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Site rename(Name name) {
        return new Site(name, null);
    }
}
