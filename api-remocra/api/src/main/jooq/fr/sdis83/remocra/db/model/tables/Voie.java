/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Voie extends TableImpl<Record> {

    private static final long serialVersionUID = -1653017257;

    /**
     * The reference instance of <code>remocra.voie</code>
     */
    public static final Voie VOIE = new Voie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.voie.id</code>.
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.voie_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<Record, Object> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\"").nullable(false), this, "");

    /**
     * The column <code>remocra.voie.mot_classant</code>.
     */
    public final TableField<Record, String> MOT_CLASSANT = createField("mot_classant", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>remocra.voie.nom</code>.
     */
    public final TableField<Record, String> NOM = createField("nom", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>remocra.voie.source</code>.
     */
    public final TableField<Record, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>remocra.voie.commune</code>.
     */
    public final TableField<Record, Long> COMMUNE = createField("commune", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>remocra.voie.actif</code>.
     */
    public final TableField<Record, Boolean> ACTIF = createField("actif", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>remocra.voie</code> table reference
     */
    public Voie() {
        this(DSL.name("voie"), null);
    }

    /**
     * Create an aliased <code>remocra.voie</code> table reference
     */
    public Voie(String alias) {
        this(DSL.name(alias), VOIE);
    }

    /**
     * Create an aliased <code>remocra.voie</code> table reference
     */
    public Voie(Name alias) {
        this(alias, VOIE);
    }

    private Voie(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Voie(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Voie(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, VOIE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VOIE_COMMUNE_IDX, Indexes.VOIE_GEOMETRIE_IDX, Indexes.VOIE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_VOIE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.VOIE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.VOIE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.VOIE__FK375195D2DA796C);
    }

    public Commune commune() {
        return new Commune(this, Keys.VOIE__FK375195D2DA796C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Voie as(String alias) {
        return new Voie(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Voie as(Name alias) {
        return new Voie(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Voie rename(String name) {
        return new Voie(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Voie rename(Name name) {
        return new Voie(name, null);
    }
}
