/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.converter.TimestampToInstantConverter;
import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Visite d'un hydrant
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HydrantVisite extends TableImpl<Record> {

    private static final long serialVersionUID = -1882576149;

    /**
     * The reference instance of <code>remocra.hydrant_visite</code>
     */
    public static final HydrantVisite HYDRANT_VISITE = new HydrantVisite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.hydrant_visite.id</code>.
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.hydrant_visite_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>remocra.hydrant_visite.hydrant</code>. PEI associé à la visite
     */
    public final TableField<Record, Long> HYDRANT = createField("hydrant", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "PEI associé à la visite");

    /**
     * The column <code>remocra.hydrant_visite.date</code>. Date de la visite
     */
    public final TableField<Record, Instant> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "Date de la visite", new TimestampToInstantConverter());

    /**
     * The column <code>remocra.hydrant_visite.type</code>. Identifiant du type de visite de l'hydrant
     */
    public final TableField<Record, Long> TYPE = createField("type", org.jooq.impl.SQLDataType.BIGINT, this, "Identifiant du type de visite de l'hydrant");

    /**
     * The column <code>remocra.hydrant_visite.ctrl_debit_pression</code>. Indique si la visite est un contrôle avec mesure de débit et de pression
     */
    public final TableField<Record, Boolean> CTRL_DEBIT_PRESSION = createField("ctrl_debit_pression", org.jooq.impl.SQLDataType.BOOLEAN, this, "Indique si la visite est un contrôle avec mesure de débit et de pression");

    /**
     * The column <code>remocra.hydrant_visite.agent1</code>.
     */
    public final TableField<Record, String> AGENT1 = createField("agent1", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_visite.agent2</code>.
     */
    public final TableField<Record, String> AGENT2 = createField("agent2", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_visite.debit</code>.
     */
    public final TableField<Record, Integer> DEBIT = createField("debit", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>remocra.hydrant_visite.debit_max</code>.
     */
    public final TableField<Record, Integer> DEBIT_MAX = createField("debit_max", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>remocra.hydrant_visite.pression</code>.
     */
    public final TableField<Record, Double> PRESSION = createField("pression", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>remocra.hydrant_visite.pression_dyn</code>.
     */
    public final TableField<Record, Double> PRESSION_DYN = createField("pression_dyn", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>remocra.hydrant_visite.pression_dyn_deb</code>.
     */
    public final TableField<Record, Double> PRESSION_DYN_DEB = createField("pression_dyn_deb", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>remocra.hydrant_visite.anomalies</code>. Tableau des identifiants des anomalies du PEI séparées par une virgule ( [] si aucune
     */
    public final TableField<Record, String> ANOMALIES = createField("anomalies", org.jooq.impl.SQLDataType.VARCHAR, this, "Tableau des identifiants des anomalies du PEI séparées par une virgule ( [] si aucune");

    /**
     * The column <code>remocra.hydrant_visite.observations</code>.
     */
    public final TableField<Record, String> OBSERVATIONS = createField("observations", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_visite.utilisateur_modification</code>.
     */
    public final TableField<Record, Long> UTILISATEUR_MODIFICATION = createField("utilisateur_modification", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_visite.organisme</code>.
     */
    public final TableField<Record, Long> ORGANISME = createField("organisme", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_visite.auteur_modification_flag</code>.
     */
    public final TableField<Record, String> AUTEUR_MODIFICATION_FLAG = createField("auteur_modification_flag", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>remocra.hydrant_visite</code> table reference
     */
    public HydrantVisite() {
        this(DSL.name("hydrant_visite"), null);
    }

    /**
     * Create an aliased <code>remocra.hydrant_visite</code> table reference
     */
    public HydrantVisite(String alias) {
        this(DSL.name(alias), HYDRANT_VISITE);
    }

    /**
     * Create an aliased <code>remocra.hydrant_visite</code> table reference
     */
    public HydrantVisite(Name alias) {
        this(alias, HYDRANT_VISITE);
    }

    private HydrantVisite(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private HydrantVisite(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Visite d'un hydrant"));
    }

    public <O extends Record> HydrantVisite(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, HYDRANT_VISITE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HYDRANT_VISITE_HYDRANT_IDX, Indexes.HYDRANT_VISITE_PKEY, Indexes.HYDRANT_VISITE_TYPE_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_HYDRANT_VISITE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.HYDRANT_VISITE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.HYDRANT_VISITE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.HYDRANT_VISITE__FK_HYDRANT, Keys.HYDRANT_VISITE__FK_TYPE, Keys.HYDRANT_VISITE__FK_UTILISATEUR, Keys.HYDRANT_VISITE__FK_ORGANISME);
    }

    public Hydrant hydrant() {
        return new Hydrant(this, Keys.HYDRANT_VISITE__FK_HYDRANT);
    }

    public TypeHydrantSaisie typeHydrantSaisie() {
        return new TypeHydrantSaisie(this, Keys.HYDRANT_VISITE__FK_TYPE);
    }

    public Utilisateur utilisateur() {
        return new Utilisateur(this, Keys.HYDRANT_VISITE__FK_UTILISATEUR);
    }

    public Organisme organisme() {
        return new Organisme(this, Keys.HYDRANT_VISITE__FK_ORGANISME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantVisite as(String alias) {
        return new HydrantVisite(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantVisite as(Name alias) {
        return new HydrantVisite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantVisite rename(String name) {
        return new HydrantVisite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantVisite rename(Name name) {
        return new HydrantVisite(name, null);
    }
}
