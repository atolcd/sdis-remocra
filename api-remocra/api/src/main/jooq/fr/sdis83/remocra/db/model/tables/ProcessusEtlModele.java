/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Modèle de processus ETL PDI mobilisable sous forme de tâche planifiée ou 
 * à la demande d'un utilisateur via l'interface REMOCRA
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessusEtlModele extends TableImpl<Record> {

    private static final long serialVersionUID = 320635173;

    /**
     * The reference instance of <code>remocra.processus_etl_modele</code>
     */
    public static final ProcessusEtlModele PROCESSUS_ETL_MODELE = new ProcessusEtlModele();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.processus_etl_modele.id</code>. Identifiant interne
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.processus_etl_modele_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne");

    /**
     * The column <code>remocra.processus_etl_modele.categorie</code>. Libellé de catégorie permettant de regrouper ou de filtrer les processus selon un thème
     */
    public final TableField<Record, String> CATEGORIE = createField("categorie", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Libellé de catégorie permettant de regrouper ou de filtrer les processus selon un thème");

    /**
     * The column <code>remocra.processus_etl_modele.code</code>. Code permettant d'identifier de manière unique et pérenne un modèle de processus ETL PDI
     */
    public final TableField<Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Code permettant d'identifier de manière unique et pérenne un modèle de processus ETL PDI");

    /**
     * The column <code>remocra.processus_etl_modele.libelle</code>. Libellé affiché en liste déroulante lors du choix du modèle de processus
     */
    public final TableField<Record, String> LIBELLE = createField("libelle", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Libellé affiché en liste déroulante lors du choix du modèle de processus");

    /**
     * The column <code>remocra.processus_etl_modele.description</code>. Description longue du modèle de requête
     */
    public final TableField<Record, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "Description longue du modèle de requête");

    /**
     * The column <code>remocra.processus_etl_modele.pdi_type</code>. Type de processus ETL : T -&gt; Transormation ou J -&gt; Tâche
     */
    public final TableField<Record, String> PDI_TYPE = createField("pdi_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Type de processus ETL : T -> Transormation ou J -> Tâche");

    /**
     * The column <code>remocra.processus_etl_modele.pdi_chemin</code>. Chemin vers la tâche ou la transformation dans le référentiel "base de données" ou vers le dossier de l'espace disque dans le cas d'un fichier KTR ou KJB
     */
    public final TableField<Record, String> PDI_CHEMIN = createField("pdi_chemin", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Chemin vers la tâche ou la transformation dans le référentiel \"base de données\" ou vers le dossier de l'espace disque dans le cas d'un fichier KTR ou KJB");

    /**
     * The column <code>remocra.processus_etl_modele.pdi_nom</code>. Nom de la tâche ou de la transformation dans le référentiel "base de données" ou nom du fichier sans le chemin dans le cas d'un fichier KTR ou KJB
     */
    public final TableField<Record, String> PDI_NOM = createField("pdi_nom", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Nom de la tâche ou de la transformation dans le référentiel \"base de données\" ou nom du fichier sans le chemin dans le cas d'un fichier KTR ou KJB");

    /**
     * The column <code>remocra.processus_etl_modele.priorite</code>. Niveau de priorité d'exécution par défaut. De 1 : Pas prioritaire urgent à 5 : Très urgent
     */
    public final TableField<Record, Long> PRIORITE = createField("priorite", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.BIGINT)), this, "Niveau de priorité d'exécution par défaut. De 1 : Pas prioritaire urgent à 5 : Très urgent");

    /**
     * The column <code>remocra.processus_etl_modele.message_succes_objet</code>. Objet du mail en cas de succès du processus. Laisser NULL pour empêcher la notification.
     */
    public final TableField<Record, String> MESSAGE_SUCCES_OBJET = createField("message_succes_objet", org.jooq.impl.SQLDataType.VARCHAR, this, "Objet du mail en cas de succès du processus. Laisser NULL pour empêcher la notification.");

    /**
     * The column <code>remocra.processus_etl_modele.message_succes_corps</code>. Corps du mail en cas de succès du processus.  Laisser NULL pour empêcher la notification. TODO: variable pour lien vers téléchargement de document
     */
    public final TableField<Record, String> MESSAGE_SUCCES_CORPS = createField("message_succes_corps", org.jooq.impl.SQLDataType.VARCHAR, this, "Corps du mail en cas de succès du processus.  Laisser NULL pour empêcher la notification. TODO: variable pour lien vers téléchargement de document");

    /**
     * The column <code>remocra.processus_etl_modele.message_echec_objet</code>. Objet du mail en cas d'échec du processus. Laisser NULL pour empêcher la notification
     */
    public final TableField<Record, String> MESSAGE_ECHEC_OBJET = createField("message_echec_objet", org.jooq.impl.SQLDataType.VARCHAR, this, "Objet du mail en cas d'échec du processus. Laisser NULL pour empêcher la notification");

    /**
     * The column <code>remocra.processus_etl_modele.message_echec_corps</code>. Corps du mail en cas d'échec du processus. Laisser NULL pour empêcher la notification
     */
    public final TableField<Record, String> MESSAGE_ECHEC_CORPS = createField("message_echec_corps", org.jooq.impl.SQLDataType.VARCHAR, this, "Corps du mail en cas d'échec du processus. Laisser NULL pour empêcher la notification");

    /**
     * Create a <code>remocra.processus_etl_modele</code> table reference
     */
    public ProcessusEtlModele() {
        this(DSL.name("processus_etl_modele"), null);
    }

    /**
     * Create an aliased <code>remocra.processus_etl_modele</code> table reference
     */
    public ProcessusEtlModele(String alias) {
        this(DSL.name(alias), PROCESSUS_ETL_MODELE);
    }

    /**
     * Create an aliased <code>remocra.processus_etl_modele</code> table reference
     */
    public ProcessusEtlModele(Name alias) {
        this(alias, PROCESSUS_ETL_MODELE);
    }

    private ProcessusEtlModele(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ProcessusEtlModele(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Modèle de processus ETL PDI mobilisable sous forme de tâche planifiée ou à la demande d'un utilisateur via l'interface REMOCRA"));
    }

    public <O extends Record> ProcessusEtlModele(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PROCESSUS_ETL_MODELE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESSUS_ETL_MODELE_CODE_KEY, Indexes.PROCESSUS_ETL_MODELE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_PROCESSUS_ETL_MODELE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PROCESSUS_ETL_MODELE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.PROCESSUS_ETL_MODELE_PKEY, Keys.PROCESSUS_ETL_MODELE_CODE_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessusEtlModele as(String alias) {
        return new ProcessusEtlModele(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessusEtlModele as(Name alias) {
        return new ProcessusEtlModele(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessusEtlModele rename(String name) {
        return new ProcessusEtlModele(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessusEtlModele rename(Name name) {
        return new ProcessusEtlModele(name, null);
    }
}
