/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.incoming.tables;


import fr.sdis83.remocra.db.model.incoming.Incoming;
import fr.sdis83.remocra.db.model.incoming.Indexes;
import fr.sdis83.remocra.db.model.incoming.Keys;
import fr.sdis83.remocra.db.model.remocra.tables.Commune;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewHydrant extends TableImpl<Record> {

    private static final long serialVersionUID = -166883353;

    /**
     * The reference instance of <code>incoming.new_hydrant</code>
     */
    public static final NewHydrant NEW_HYDRANT = new NewHydrant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>incoming.new_hydrant.id_new_hydrant</code>.
     */
    public final TableField<Record, UUID> ID_NEW_HYDRANT = createField("id_new_hydrant", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<Record, Object> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "");

    /**
     * The column <code>incoming.new_hydrant.code_new_hydrant</code>.
     */
    public final TableField<Record, String> CODE_NEW_HYDRANT = createField("code_new_hydrant", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>incoming.new_hydrant.id_commune</code>.
     */
    public final TableField<Record, Long> ID_COMMUNE = createField("id_commune", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>incoming.new_hydrant.voie_new_hydrant</code>.
     */
    public final TableField<Record, String> VOIE_NEW_HYDRANT = createField("voie_new_hydrant", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>incoming.new_hydrant.id_gestionnaire</code>.
     */
    public final TableField<Record, UUID> ID_GESTIONNAIRE = createField("id_gestionnaire", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>incoming.new_hydrant.id_nature</code>.
     */
    public final TableField<Record, Long> ID_NATURE = createField("id_nature", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>incoming.new_hydrant.id_naturedeci</code>.
     */
    public final TableField<Record, Long> ID_NATUREDECI = createField("id_naturedeci", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>incoming.new_hydrant.observation_new_hydrant</code>.
     */
    public final TableField<Record, String> OBSERVATION_NEW_HYDRANT = createField("observation_new_hydrant", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>incoming.new_hydrant.id_gestionnaire_remocra</code>.
     */
    public final TableField<Record, Long> ID_GESTIONNAIRE_REMOCRA = createField("id_gestionnaire_remocra", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>incoming.new_hydrant</code> table reference
     */
    public NewHydrant() {
        this(DSL.name("new_hydrant"), null);
    }

    /**
     * Create an aliased <code>incoming.new_hydrant</code> table reference
     */
    public NewHydrant(String alias) {
        this(DSL.name(alias), NEW_HYDRANT);
    }

    /**
     * Create an aliased <code>incoming.new_hydrant</code> table reference
     */
    public NewHydrant(Name alias) {
        this(alias, NEW_HYDRANT);
    }

    private NewHydrant(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private NewHydrant(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NewHydrant(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, NEW_HYDRANT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Incoming.INCOMING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NEW_HYDRANT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.NEW_HYDRANT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.NEW_HYDRANT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.NEW_HYDRANT__NEW_HYDRANT_ID_COMMUNE_FKEY, Keys.NEW_HYDRANT__NEW_HYDRANT_ID_GESTIONNAIRE_FKEY);
    }

    public Commune commune() {
        return new Commune(this, Keys.NEW_HYDRANT__NEW_HYDRANT_ID_COMMUNE_FKEY);
    }

    public Gestionnaire gestionnaire() {
        return new Gestionnaire(this, Keys.NEW_HYDRANT__NEW_HYDRANT_ID_GESTIONNAIRE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NewHydrant as(String alias) {
        return new NewHydrant(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NewHydrant as(Name alias) {
        return new NewHydrant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NewHydrant rename(String name) {
        return new NewHydrant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NewHydrant rename(Name name) {
        return new NewHydrant(name, null);
    }
}
