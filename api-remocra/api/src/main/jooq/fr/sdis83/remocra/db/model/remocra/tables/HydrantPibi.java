/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HydrantPibi extends TableImpl<Record> {

    private static final long serialVersionUID = 1184044073;

    /**
     * The reference instance of <code>remocra.hydrant_pibi</code>
     */
    public static final HydrantPibi HYDRANT_PIBI = new HydrantPibi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.hydrant_pibi.debit</code>.
     */
    public final TableField<Record, Integer> DEBIT = createField("debit", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.debit_max</code>.
     */
    public final TableField<Record, Integer> DEBIT_MAX = createField("debit_max", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.pression</code>.
     */
    public final TableField<Record, Double> PRESSION = createField("pression", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.pression_dyn</code>.
     */
    public final TableField<Record, Double> PRESSION_DYN = createField("pression_dyn", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.id</code>.
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>remocra.hydrant_pibi.diametre</code>. Diamètre des canalisation
     */
    public final TableField<Record, Long> DIAMETRE = createField("diametre", org.jooq.impl.SQLDataType.BIGINT, this, "Diamètre des canalisation");

    /**
     * The column <code>remocra.hydrant_pibi.gest_reseau</code>.
     */
    public final TableField<Record, String> GEST_RESEAU = createField("gest_reseau", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.numeroscp</code>.
     */
    public final TableField<Record, String> NUMEROSCP = createField("numeroscp", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.renversable</code>.
     */
    public final TableField<Record, Boolean> RENVERSABLE = createField("renversable", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.marque</code>.
     */
    public final TableField<Record, Long> MARQUE = createField("marque", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.modele</code>.
     */
    public final TableField<Record, Long> MODELE = createField("modele", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.pena</code>.
     */
    public final TableField<Record, Long> PENA = createField("pena", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.pression_dyn_deb</code>.
     */
    public final TableField<Record, Double> PRESSION_DYN_DEB = createField("pression_dyn_deb", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.jumele</code>. Identifiant du PIBI jumelé
     */
    public final TableField<Record, Long> JUMELE = createField("jumele", org.jooq.impl.SQLDataType.BIGINT, this, "Identifiant du PIBI jumelé");

    /**
     * The column <code>remocra.hydrant_pibi.dispositif_inviolabilite</code>. Présence d'un dispositif d'inviolabilité
     */
    public final TableField<Record, Boolean> DISPOSITIF_INVIOLABILITE = createField("dispositif_inviolabilite", org.jooq.impl.SQLDataType.BOOLEAN, this, "Présence d'un dispositif d'inviolabilité");

    /**
     * The column <code>remocra.hydrant_pibi.reservoir</code>. Identifiant du réservoir alimentant l'hydrant
     */
    public final TableField<Record, Long> RESERVOIR = createField("reservoir", org.jooq.impl.SQLDataType.BIGINT, this, "Identifiant du réservoir alimentant l'hydrant");

    /**
     * The column <code>remocra.hydrant_pibi.service_eaux</code>. Organisme de type Service des eaux concerné
     */
    public final TableField<Record, Long> SERVICE_EAUX = createField("service_eaux", org.jooq.impl.SQLDataType.BIGINT, this, "Organisme de type Service des eaux concerné");

    /**
     * The column <code>remocra.hydrant_pibi.debit_renforce</code>. Caractère renforcé du débit
     */
    public final TableField<Record, Boolean> DEBIT_RENFORCE = createField("debit_renforce", org.jooq.impl.SQLDataType.BOOLEAN, this, "Caractère renforcé du débit");

    /**
     * The column <code>remocra.hydrant_pibi.type_reseau_canalisation</code>. Identifiant du type de canalisation du réseau
     */
    public final TableField<Record, Long> TYPE_RESEAU_CANALISATION = createField("type_reseau_canalisation", org.jooq.impl.SQLDataType.BIGINT, this, "Identifiant du type de canalisation du réseau");

    /**
     * The column <code>remocra.hydrant_pibi.type_reseau_alimentation</code>.
     */
    public final TableField<Record, Long> TYPE_RESEAU_ALIMENTATION = createField("type_reseau_alimentation", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.diametre_canalisation</code>.
     */
    public final TableField<Record, Integer> DIAMETRE_CANALISATION = createField("diametre_canalisation", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>remocra.hydrant_pibi.surpresse</code>. Indique si le réseau est surpressé
     */
    public final TableField<Record, Boolean> SURPRESSE = createField("surpresse", org.jooq.impl.SQLDataType.BOOLEAN, this, "Indique si le réseau est surpressé");

    /**
     * The column <code>remocra.hydrant_pibi.additive</code>. Indique si le réseau est additivé
     */
    public final TableField<Record, Boolean> ADDITIVE = createField("additive", org.jooq.impl.SQLDataType.BOOLEAN, this, "Indique si le réseau est additivé");

    /**
     * The column <code>remocra.hydrant_pibi.debit_autre</code>. Débit à une autre pression dynamique (m3/h)
     */
    public final TableField<Record, Integer> DEBIT_AUTRE = createField("debit_autre", org.jooq.impl.SQLDataType.INTEGER, this, "Débit à une autre pression dynamique (m3/h)");

    /**
     * The column <code>remocra.hydrant_pibi.pression_dyn_autre</code>. Pression dynamique (bar)
     */
    public final TableField<Record, Double> PRESSION_DYN_AUTRE = createField("pression_dyn_autre", org.jooq.impl.SQLDataType.DOUBLE, this, "Pression dynamique (bar)");

    /**
     * Create a <code>remocra.hydrant_pibi</code> table reference
     */
    public HydrantPibi() {
        this(DSL.name("hydrant_pibi"), null);
    }

    /**
     * Create an aliased <code>remocra.hydrant_pibi</code> table reference
     */
    public HydrantPibi(String alias) {
        this(DSL.name(alias), HYDRANT_PIBI);
    }

    /**
     * Create an aliased <code>remocra.hydrant_pibi</code> table reference
     */
    public HydrantPibi(Name alias) {
        this(alias, HYDRANT_PIBI);
    }

    private HydrantPibi(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private HydrantPibi(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> HydrantPibi(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, HYDRANT_PIBI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HYDRANT_PIBI_DIAMETRE_IDX, Indexes.HYDRANT_PIBI_JUMELE_IDX, Indexes.HYDRANT_PIBI_MARQUE_IDX, Indexes.HYDRANT_PIBI_MODELE_IDX, Indexes.HYDRANT_PIBI_PENA_IDX, Indexes.HYDRANT_PIBI_PKEY, Indexes.HYDRANT_PIBI_RESERVOIR_IDX, Indexes.HYDRANT_PIBI_SERVICE_EAUX_IDX, Indexes.HYDRANT_PIBI_TYPE_RESEAU_ALIMENTATION_IDX, Indexes.HYDRANT_PIBI_TYPE_RESEAU_CANALISATION_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.HYDRANT_PIBI_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.HYDRANT_PIBI_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.HYDRANT_PIBI__FKD60E21B7B34721EF, Keys.HYDRANT_PIBI__FKD60E21B7A5A0E880, Keys.HYDRANT_PIBI__FKD60E21B7CD9E6420, Keys.HYDRANT_PIBI__FKD60E21B7CF1BDF92, Keys.HYDRANT_PIBI__FKD60E21B7DDA2E3C4, Keys.HYDRANT_PIBI__FK_JUMELE, Keys.HYDRANT_PIBI__FK_RESERVOIR, Keys.HYDRANT_PIBI__FK_SERVICE_EAUX, Keys.HYDRANT_PIBI__FK_TYPE_RESEAU_CANALISATION, Keys.HYDRANT_PIBI__FK_TYPE_RESEAU_ALIMENTATION);
    }

    public Hydrant hydrant() {
        return new Hydrant(this, Keys.HYDRANT_PIBI__FKD60E21B7B34721EF);
    }

    public TypeHydrantDiametre typeHydrantDiametre() {
        return new TypeHydrantDiametre(this, Keys.HYDRANT_PIBI__FKD60E21B7A5A0E880);
    }

    public TypeHydrantMarque typeHydrantMarque() {
        return new TypeHydrantMarque(this, Keys.HYDRANT_PIBI__FKD60E21B7CD9E6420);
    }

    public TypeHydrantModele typeHydrantModele() {
        return new TypeHydrantModele(this, Keys.HYDRANT_PIBI__FKD60E21B7CF1BDF92);
    }

    public HydrantPena hydrantPena() {
        return new HydrantPena(this, Keys.HYDRANT_PIBI__FKD60E21B7DDA2E3C4);
    }

    public fr.sdis83.remocra.db.model.remocra.tables.HydrantPibi hydrantPibi() {
        return new fr.sdis83.remocra.db.model.remocra.tables.HydrantPibi(this, Keys.HYDRANT_PIBI__FK_JUMELE);
    }

    public HydrantReservoir hydrantReservoir() {
        return new HydrantReservoir(this, Keys.HYDRANT_PIBI__FK_RESERVOIR);
    }

    public Organisme organisme() {
        return new Organisme(this, Keys.HYDRANT_PIBI__FK_SERVICE_EAUX);
    }

    public TypeReseauCanalisation typeReseauCanalisation() {
        return new TypeReseauCanalisation(this, Keys.HYDRANT_PIBI__FK_TYPE_RESEAU_CANALISATION);
    }

    public TypeReseauAlimentation typeReseauAlimentation() {
        return new TypeReseauAlimentation(this, Keys.HYDRANT_PIBI__FK_TYPE_RESEAU_ALIMENTATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantPibi as(String alias) {
        return new HydrantPibi(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantPibi as(Name alias) {
        return new HydrantPibi(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantPibi rename(String name) {
        return new HydrantPibi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantPibi rename(Name name) {
        return new HydrantPibi(name, null);
    }
}
