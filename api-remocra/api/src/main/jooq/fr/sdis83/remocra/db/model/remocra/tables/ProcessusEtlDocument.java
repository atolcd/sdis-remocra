/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.converter.TimestampToInstantConverter;
import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Document généré par un processus ETL et mis à disposition d'un destinataire
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessusEtlDocument extends TableImpl<Record> {

    private static final long serialVersionUID = -963584883;

    /**
     * The reference instance of <code>remocra.processus_etl_document</code>
     */
    public static final ProcessusEtlDocument PROCESSUS_ETL_DOCUMENT = new ProcessusEtlDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.processus_etl_document.id</code>. Identifiant interne
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.processus_etl_document_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne");

    /**
     * The column <code>remocra.processus_etl_document.document</code>. Référence au document
     */
    public final TableField<Record, Long> DOCUMENT = createField("document", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Référence au document");

    /**
     * The column <code>remocra.processus_etl_document.processus</code>. Référence au processus à l'origine de création du document
     */
    public final TableField<Record, Long> PROCESSUS = createField("processus", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Référence au processus à l'origine de création du document");

    /**
     * The column <code>remocra.processus_etl_document.code</code>. Code unique exploité pour l'accusé de téléchargement
     */
    public final TableField<Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("md5(((('document-processus-etl-destinataire-'::text || (now())::text) || '-'::text) || floor(((random() * (10000)::double precision) + (1)::double precision))))", org.jooq.impl.SQLDataType.VARCHAR)), this, "Code unique exploité pour l'accusé de téléchargement");

    /**
     * The column <code>remocra.processus_etl_document.nom_destinataire</code>. Indication sur le destinataire du document
     */
    public final TableField<Record, String> NOM_DESTINATAIRE = createField("nom_destinataire", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Indication sur le destinataire du document");

    /**
     * The column <code>remocra.processus_etl_document.type_destinataire</code>. Indication sur le type de destinataire du courrier. Organisme = ORGANISME, utilisateur = UTILISATEUR, autre = AUTRE
     */
    public final TableField<Record, String> TYPE_DESTINATAIRE = createField("type_destinataire", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Indication sur le type de destinataire du courrier. Organisme = ORGANISME, utilisateur = UTILISATEUR, autre = AUTRE");

    /**
     * The column <code>remocra.processus_etl_document.id_destinataire</code>. Identifiant du destinataire du document dans la base Remocra quand le type = ORGANISME ou UTILISATEUR
     */
    public final TableField<Record, String> ID_DESTINATAIRE = createField("id_destinataire", org.jooq.impl.SQLDataType.VARCHAR, this, "Identifiant du destinataire du document dans la base Remocra quand le type = ORGANISME ou UTILISATEUR");

    /**
     * The column <code>remocra.processus_etl_document.accuse</code>. Date et heure d'accusé de téléchargement
     */
    public final TableField<Record, Instant> ACCUSE = createField("accuse", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Date et heure d'accusé de téléchargement", new TimestampToInstantConverter());

    /**
     * Create a <code>remocra.processus_etl_document</code> table reference
     */
    public ProcessusEtlDocument() {
        this(DSL.name("processus_etl_document"), null);
    }

    /**
     * Create an aliased <code>remocra.processus_etl_document</code> table reference
     */
    public ProcessusEtlDocument(String alias) {
        this(DSL.name(alias), PROCESSUS_ETL_DOCUMENT);
    }

    /**
     * Create an aliased <code>remocra.processus_etl_document</code> table reference
     */
    public ProcessusEtlDocument(Name alias) {
        this(alias, PROCESSUS_ETL_DOCUMENT);
    }

    private ProcessusEtlDocument(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ProcessusEtlDocument(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Document généré par un processus ETL et mis à disposition d'un destinataire"));
    }

    public <O extends Record> ProcessusEtlDocument(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PROCESSUS_ETL_DOCUMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESSUS_ETL_DOCUMENT_DOCUMENT_IDX, Indexes.PROCESSUS_ETL_DOCUMENT_PKEY, Indexes.PROCESSUS_ETL_DOCUMENT_PROCESSUS_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_PROCESSUS_ETL_DOCUMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PROCESSUS_ETL_DOCUMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.PROCESSUS_ETL_DOCUMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.PROCESSUS_ETL_DOCUMENT__PROCESSUS_ETL_DOCUMENT_DOCUMENT_FK, Keys.PROCESSUS_ETL_DOCUMENT__PROCESSUS_ETL_DOCUMENT_PROCESSUS);
    }

    public Document document() {
        return new Document(this, Keys.PROCESSUS_ETL_DOCUMENT__PROCESSUS_ETL_DOCUMENT_DOCUMENT_FK);
    }

    public ProcessusEtl processusEtl() {
        return new ProcessusEtl(this, Keys.PROCESSUS_ETL_DOCUMENT__PROCESSUS_ETL_DOCUMENT_PROCESSUS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessusEtlDocument as(String alias) {
        return new ProcessusEtlDocument(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessusEtlDocument as(Name alias) {
        return new ProcessusEtlDocument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessusEtlDocument rename(String name) {
        return new ProcessusEtlDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessusEtlDocument rename(Name name) {
        return new ProcessusEtlDocument(name, null);
    }
}
