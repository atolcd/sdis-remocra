/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.converter.TimestampToInstantConverter;
import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HydrantPrescrit extends TableImpl<Record> {

    private static final long serialVersionUID = -63997542;

    /**
     * The reference instance of <code>remocra.hydrant_prescrit</code>
     */
    public static final HydrantPrescrit HYDRANT_PRESCRIT = new HydrantPrescrit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.hydrant_prescrit.id</code>.
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.hydrant_prescrit_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>remocra.hydrant_prescrit.date_prescrit</code>.
     */
    public final TableField<Record, Instant> DATE_PRESCRIT = createField("date_prescrit", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampToInstantConverter());

    /**
     * The column <code>remocra.hydrant_prescrit.debit</code>.
     */
    public final TableField<Record, Integer> DEBIT = createField("debit", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<Record, Object> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\"").nullable(false), this, "");

    /**
     * The column <code>remocra.hydrant_prescrit.nb_poteaux</code>.
     */
    public final TableField<Record, Integer> NB_POTEAUX = createField("nb_poteaux", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>remocra.hydrant_prescrit.organisme</code>.
     */
    public final TableField<Record, Long> ORGANISME = createField("organisme", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.hydrant_prescrit.commentaire</code>.
     */
    public final TableField<Record, String> COMMENTAIRE = createField("commentaire", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_prescrit.agent</code>.
     */
    public final TableField<Record, String> AGENT = createField("agent", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.hydrant_prescrit.numdossier</code>.
     */
    public final TableField<Record, String> NUMDOSSIER = createField("numdossier", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>remocra.hydrant_prescrit</code> table reference
     */
    public HydrantPrescrit() {
        this(DSL.name("hydrant_prescrit"), null);
    }

    /**
     * Create an aliased <code>remocra.hydrant_prescrit</code> table reference
     */
    public HydrantPrescrit(String alias) {
        this(DSL.name(alias), HYDRANT_PRESCRIT);
    }

    /**
     * Create an aliased <code>remocra.hydrant_prescrit</code> table reference
     */
    public HydrantPrescrit(Name alias) {
        this(alias, HYDRANT_PRESCRIT);
    }

    private HydrantPrescrit(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private HydrantPrescrit(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> HydrantPrescrit(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, HYDRANT_PRESCRIT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HYDRANT_PRESCRIT_GEOMETRIE_IDX, Indexes.HYDRANT_PRESCRIT_ORGANISME_IDX, Indexes.HYDRANT_PRESCRIT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_HYDRANT_PRESCRIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.HYDRANT_PRESCRIT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.HYDRANT_PRESCRIT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.HYDRANT_PRESCRIT__FKDC1AB241374ADD52);
    }

    public Organisme organisme() {
        return new Organisme(this, Keys.HYDRANT_PRESCRIT__FKDC1AB241374ADD52);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantPrescrit as(String alias) {
        return new HydrantPrescrit(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HydrantPrescrit as(Name alias) {
        return new HydrantPrescrit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantPrescrit rename(String name) {
        return new HydrantPrescrit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HydrantPrescrit rename(Name name) {
        return new HydrantPrescrit(name, null);
    }
}
