/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.converter.TimestampToInstantConverter;
import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Table de synchronisation des interventions pour utilisation dans REMOcRA
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Intervention extends TableImpl<Record> {

    private static final long serialVersionUID = -693348062;

    /**
     * The reference instance of <code>remocra.intervention</code>
     */
    public static final Intervention INTERVENTION = new Intervention();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.intervention.id</code>. Identifiant autogénéré
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.intervention_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant autogénéré");

    /**
     * The column <code>remocra.intervention.code</code>. Code unique de l'intervention
     */
    public final TableField<Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR, this, "Code unique de l'intervention");

    /**
     * The column <code>remocra.intervention.code_type</code>. Code du type de l'intervention
     */
    public final TableField<Record, String> CODE_TYPE = createField("code_type", org.jooq.impl.SQLDataType.VARCHAR, this, "Code du type de l'intervention");

    /**
     * The column <code>remocra.intervention.libelle_type</code>. Libellé du type de l'intervention
     */
    public final TableField<Record, String> LIBELLE_TYPE = createField("libelle_type", org.jooq.impl.SQLDataType.VARCHAR, this, "Libellé du type de l'intervention");

    /**
     * The column <code>remocra.intervention.priorite</code>. Priorité de l'intervention
     */
    public final TableField<Record, Integer> PRIORITE = createField("priorite", org.jooq.impl.SQLDataType.INTEGER, this, "Priorité de l'intervention");

    /**
     * The column <code>remocra.intervention.date_creation</code>. Date de création de l'intervention
     */
    public final TableField<Record, Instant> DATE_CREATION = createField("date_creation", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Date de création de l'intervention", new TimestampToInstantConverter());

    /**
     * The column <code>remocra.intervention.date_modification</code>. Date de modification de l'intervention
     */
    public final TableField<Record, Instant> DATE_MODIFICATION = createField("date_modification", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Date de modification de l'intervention", new TimestampToInstantConverter());

    /**
     * The column <code>remocra.intervention.date_cloture</code>. Date de clotûre de l'intervention
     */
    public final TableField<Record, Instant> DATE_CLOTURE = createField("date_cloture", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Date de clotûre de l'intervention", new TimestampToInstantConverter());

    /**
     * The column <code>remocra.intervention.cloture</code>.
     */
    public final TableField<Record, String> CLOTURE = createField("cloture", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.intervention.num_voie</code>. Numéro de la voie du lieu de l'intervention
     */
    public final TableField<Record, String> NUM_VOIE = createField("num_voie", org.jooq.impl.SQLDataType.VARCHAR, this, "Numéro de la voie du lieu de l'intervention");

    /**
     * The column <code>remocra.intervention.voie</code>. Nom de la voie du lieu de l'intervention
     */
    public final TableField<Record, String> VOIE = createField("voie", org.jooq.impl.SQLDataType.VARCHAR, this, "Nom de la voie du lieu de l'intervention");

    /**
     * The column <code>remocra.intervention.commune</code>. Commune de l'intervention
     */
    public final TableField<Record, Long> COMMUNE = createField("commune", org.jooq.impl.SQLDataType.BIGINT, this, "Commune de l'intervention");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<Record, Object> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\""), this, "Géométrie de l'intervention");

    /**
     * Create a <code>remocra.intervention</code> table reference
     */
    public Intervention() {
        this(DSL.name("intervention"), null);
    }

    /**
     * Create an aliased <code>remocra.intervention</code> table reference
     */
    public Intervention(String alias) {
        this(DSL.name(alias), INTERVENTION);
    }

    /**
     * Create an aliased <code>remocra.intervention</code> table reference
     */
    public Intervention(Name alias) {
        this(alias, INTERVENTION);
    }

    private Intervention(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Intervention(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table de synchronisation des interventions pour utilisation dans REMOcRA"));
    }

    public <O extends Record> Intervention(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, INTERVENTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INTERVENTION_GEOMETRIE_IDX, Indexes.INTERVENTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_INTERVENTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.INTERVENTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.INTERVENTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.INTERVENTION__FK_INTERVENTION_COMMUNE);
    }

    public Commune commune() {
        return new Commune(this, Keys.INTERVENTION__FK_INTERVENTION_COMMUNE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Intervention as(String alias) {
        return new Intervention(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Intervention as(Name alias) {
        return new Intervention(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Intervention rename(String name) {
        return new Intervention(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Intervention rename(Name name) {
        return new Intervention(name, null);
    }
}
