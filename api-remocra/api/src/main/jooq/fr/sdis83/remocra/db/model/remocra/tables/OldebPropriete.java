/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Lien entre un propriétaire et une parcelle soumise à une obligation légale 
 * de débroussaillement
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OldebPropriete extends TableImpl<Record> {

    private static final long serialVersionUID = -490916683;

    /**
     * The reference instance of <code>remocra.oldeb_propriete</code>
     */
    public static final OldebPropriete OLDEB_PROPRIETE = new OldebPropriete();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.oldeb_propriete.id</code>.
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.oldeb_propriete_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>remocra.oldeb_propriete.oldeb</code>.
     */
    public final TableField<Record, Long> OLDEB = createField("oldeb", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>remocra.oldeb_propriete.proprietaire</code>.
     */
    public final TableField<Record, Long> PROPRIETAIRE = createField("proprietaire", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>remocra.oldeb_propriete.residence</code>.
     */
    public final TableField<Record, Long> RESIDENCE = createField("residence", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>remocra.oldeb_propriete</code> table reference
     */
    public OldebPropriete() {
        this(DSL.name("oldeb_propriete"), null);
    }

    /**
     * Create an aliased <code>remocra.oldeb_propriete</code> table reference
     */
    public OldebPropriete(String alias) {
        this(DSL.name(alias), OLDEB_PROPRIETE);
    }

    /**
     * Create an aliased <code>remocra.oldeb_propriete</code> table reference
     */
    public OldebPropriete(Name alias) {
        this(alias, OLDEB_PROPRIETE);
    }

    private OldebPropriete(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private OldebPropriete(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Lien entre un propriétaire et une parcelle soumise à une obligation légale de débroussaillement"));
    }

    public <O extends Record> OldebPropriete(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, OLDEB_PROPRIETE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OLDEB_PROPRIETE_OLDEB_IDX, Indexes.OLDEB_PROPRIETE_PKEY, Indexes.OLDEB_PROPRIETE_PROPRIETAIRE_IDX, Indexes.OLDEB_PROPRIETE_RESIDENCE_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_OLDEB_PROPRIETE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.OLDEB_PROPRIETE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.OLDEB_PROPRIETE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.OLDEB_PROPRIETE__FK_OLDEB_PROPRIETE_OLDEB, Keys.OLDEB_PROPRIETE__FK_OLDEB_PROPRIETE_PROPRIETAIRE, Keys.OLDEB_PROPRIETE__FK_OLDEB_PROPRIETE_RESIDENCE);
    }

    public Oldeb oldeb() {
        return new Oldeb(this, Keys.OLDEB_PROPRIETE__FK_OLDEB_PROPRIETE_OLDEB);
    }

    public OldebProprietaire oldebProprietaire() {
        return new OldebProprietaire(this, Keys.OLDEB_PROPRIETE__FK_OLDEB_PROPRIETE_PROPRIETAIRE);
    }

    public TypeOldebResidence typeOldebResidence() {
        return new TypeOldebResidence(this, Keys.OLDEB_PROPRIETE__FK_OLDEB_PROPRIETE_RESIDENCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OldebPropriete as(String alias) {
        return new OldebPropriete(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OldebPropriete as(Name alias) {
        return new OldebPropriete(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OldebPropriete rename(String name) {
        return new OldebPropriete(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OldebPropriete rename(Name name) {
        return new OldebPropriete(name, null);
    }
}
