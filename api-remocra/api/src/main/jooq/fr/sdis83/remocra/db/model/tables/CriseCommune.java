/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Gestion de crise : commune associée à un épisode de crise. Permet de définir 
 * un territoire impacté. Les mises à jours de communes sont traçées sous 
 * formes d'évènements spécifiques
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CriseCommune extends TableImpl<Record> {

    private static final long serialVersionUID = -513068843;

    /**
     * The reference instance of <code>remocra.crise_commune</code>
     */
    public static final CriseCommune CRISE_COMMUNE = new CriseCommune();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.crise_commune.crise</code>. Identifiant de la crise associée
     */
    public final TableField<Record, Long> CRISE = createField("crise", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Identifiant de la crise associée");

    /**
     * The column <code>remocra.crise_commune.commune</code>. Identifiant de la commune associée
     */
    public final TableField<Record, Long> COMMUNE = createField("commune", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Identifiant de la commune associée");

    /**
     * Create a <code>remocra.crise_commune</code> table reference
     */
    public CriseCommune() {
        this(DSL.name("crise_commune"), null);
    }

    /**
     * Create an aliased <code>remocra.crise_commune</code> table reference
     */
    public CriseCommune(String alias) {
        this(DSL.name(alias), CRISE_COMMUNE);
    }

    /**
     * Create an aliased <code>remocra.crise_commune</code> table reference
     */
    public CriseCommune(Name alias) {
        this(alias, CRISE_COMMUNE);
    }

    private CriseCommune(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CriseCommune(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Gestion de crise : commune associée à un épisode de crise. Permet de définir un territoire impacté. Les mises à jours de communes sont traçées sous formes d'évènements spécifiques"));
    }

    public <O extends Record> CriseCommune(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CRISE_COMMUNE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CRISE_COMMUNE_COMMUNE_IDX, Indexes.CRISE_COMMUNE_CRISE_IDX, Indexes.CRISE_COMMUNE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.CRISE_COMMUNE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.CRISE_COMMUNE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.CRISE_COMMUNE__CRISE_COMMUNE_CRISE_FK, Keys.CRISE_COMMUNE__CRISE_COMMUNE_COMMUNE_FK);
    }

    public Crise crise() {
        return new Crise(this, Keys.CRISE_COMMUNE__CRISE_COMMUNE_CRISE_FK);
    }

    public Commune commune() {
        return new Commune(this, Keys.CRISE_COMMUNE__CRISE_COMMUNE_COMMUNE_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CriseCommune as(String alias) {
        return new CriseCommune(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CriseCommune as(Name alias) {
        return new CriseCommune(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CriseCommune rename(String name) {
        return new CriseCommune(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CriseCommune rename(Name name) {
        return new CriseCommune(name, null);
    }
}
