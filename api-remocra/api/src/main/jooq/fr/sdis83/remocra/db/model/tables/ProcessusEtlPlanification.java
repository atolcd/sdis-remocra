/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Planification d'un processus ETL. Une demande de processus est automatiquement 
 * créée par le planificateur
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessusEtlPlanification extends TableImpl<Record> {

    private static final long serialVersionUID = 195423697;

    /**
     * The reference instance of <code>remocra.processus_etl_planification</code>
     */
    public static final ProcessusEtlPlanification PROCESSUS_ETL_PLANIFICATION = new ProcessusEtlPlanification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.processus_etl_planification.id</code>.
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.processus_etl_planification_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>remocra.processus_etl_planification.modele</code>. Identifiant du modèle de processus ETL
     */
    public final TableField<Record, Long> MODELE = createField("modele", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Identifiant du modèle de processus ETL");

    /**
     * The column <code>remocra.processus_etl_planification.expression</code>. Expression de type CRON
     */
    public final TableField<Record, String> EXPRESSION = createField("expression", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Expression de type CRON");

    /**
     * The column <code>remocra.processus_etl_planification.categorie</code>. Libellé de catégorie permettant de regrouper ou de filtrer les processus selon un thème
     */
    public final TableField<Record, String> CATEGORIE = createField("categorie", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Libellé de catégorie permettant de regrouper ou de filtrer les processus selon un thème");

    /**
     * The column <code>remocra.processus_etl_planification.objet_concerne</code>. Identifiant de l'objet associé à la planification (crise/hydrant...)
     */
    public final TableField<Record, Long> OBJET_CONCERNE = createField("objet_concerne", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Identifiant de l'objet associé à la planification (crise/hydrant...)");

    /**
     * Create a <code>remocra.processus_etl_planification</code> table reference
     */
    public ProcessusEtlPlanification() {
        this(DSL.name("processus_etl_planification"), null);
    }

    /**
     * Create an aliased <code>remocra.processus_etl_planification</code> table reference
     */
    public ProcessusEtlPlanification(String alias) {
        this(DSL.name(alias), PROCESSUS_ETL_PLANIFICATION);
    }

    /**
     * Create an aliased <code>remocra.processus_etl_planification</code> table reference
     */
    public ProcessusEtlPlanification(Name alias) {
        this(alias, PROCESSUS_ETL_PLANIFICATION);
    }

    private ProcessusEtlPlanification(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ProcessusEtlPlanification(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Planification d'un processus ETL. Une demande de processus est automatiquement créée par le planificateur"));
    }

    public <O extends Record> ProcessusEtlPlanification(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PROCESSUS_ETL_PLANIFICATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESSUS_ETL_PLANIFICATION_MODELE_IDX, Indexes.PROCESSUS_ETL_PLANIFICATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_PROCESSUS_ETL_PLANIFICATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PROCESSUS_ETL_PLANIFICATION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.PROCESSUS_ETL_PLANIFICATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.PROCESSUS_ETL_PLANIFICATION__PROCESSUS_ETL_PLANIFICATION_MODELE);
    }

    public ProcessusEtlModele processusEtlModele() {
        return new ProcessusEtlModele(this, Keys.PROCESSUS_ETL_PLANIFICATION__PROCESSUS_ETL_PLANIFICATION_MODELE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessusEtlPlanification as(String alias) {
        return new ProcessusEtlPlanification(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessusEtlPlanification as(Name alias) {
        return new ProcessusEtlPlanification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessusEtlPlanification rename(String name) {
        return new ProcessusEtlPlanification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessusEtlPlanification rename(Name name) {
        return new ProcessusEtlPlanification(name, null);
    }
}
