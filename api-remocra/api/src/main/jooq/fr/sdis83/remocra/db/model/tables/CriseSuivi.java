/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.converter.OffsetDateTimeToInstantConverter;
import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Message de suivi lié à une crise ou à un évènement. Le message peut être 
 * créé directement et manuellement par un utilisateur ou de manière indirecte 
 * par le système suite à une action dans REMOCRA. Ex : mise à jour des attributs 
 * d'un évènement, ajout d'un document, création d'une carte horodatée, etc.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CriseSuivi extends TableImpl<Record> {

    private static final long serialVersionUID = -793585375;

    /**
     * The reference instance of <code>remocra.crise_suivi</code>
     */
    public static final CriseSuivi CRISE_SUIVI = new CriseSuivi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.crise_suivi.id</code>. Identifiant interne
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.crise_suivi_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne");

    /**
     * The column <code>remocra.crise_suivi.origine</code>. Origine du message : auteur, source d'information
     */
    public final TableField<Record, String> ORIGINE = createField("origine", org.jooq.impl.SQLDataType.VARCHAR, this, "Origine du message : auteur, source d'information");

    /**
     * The column <code>remocra.crise_suivi.objet</code>.
     */
    public final TableField<Record, String> OBJET = createField("objet", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>remocra.crise_suivi.message</code>. Texte du message
     */
    public final TableField<Record, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.VARCHAR, this, "Texte du message");

    /**
     * The column <code>remocra.crise_suivi.creation</code>. Date et heure du message
     */
    public final TableField<Record, Instant> CREATION = createField("creation", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "Date et heure du message", new OffsetDateTimeToInstantConverter());

    /**
     * The column <code>remocra.crise_suivi.importance</code>. Niveau d'importance permettant de filtrer facilement
     */
    public final TableField<Record, Integer> IMPORTANCE = createField("importance", org.jooq.impl.SQLDataType.INTEGER, this, "Niveau d'importance permettant de filtrer facilement");

    /**
     * The column <code>remocra.crise_suivi.tags</code>. Tags permettant qualifier facilement un message
     */
    public final TableField<Record, String> TAGS = createField("tags", org.jooq.impl.SQLDataType.VARCHAR, this, "Tags permettant qualifier facilement un message");

    /**
     * The column <code>remocra.crise_suivi.crise</code>. Crise associée
     */
    public final TableField<Record, Long> CRISE = createField("crise", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Crise associée");

    /**
     * The column <code>remocra.crise_suivi.evenement</code>. Evènement éventuellement associé
     */
    public final TableField<Record, Long> EVENEMENT = createField("evenement", org.jooq.impl.SQLDataType.BIGINT, this, "Evènement éventuellement associé");

    /**
     * The column <code>remocra.crise_suivi.auteur</code>.
     */
    public final TableField<Record, String> AUTEUR = createField("auteur", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>remocra.crise_suivi</code> table reference
     */
    public CriseSuivi() {
        this(DSL.name("crise_suivi"), null);
    }

    /**
     * Create an aliased <code>remocra.crise_suivi</code> table reference
     */
    public CriseSuivi(String alias) {
        this(DSL.name(alias), CRISE_SUIVI);
    }

    /**
     * Create an aliased <code>remocra.crise_suivi</code> table reference
     */
    public CriseSuivi(Name alias) {
        this(alias, CRISE_SUIVI);
    }

    private CriseSuivi(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CriseSuivi(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Message de suivi lié à une crise ou à un évènement. Le message peut être créé directement et manuellement par un utilisateur ou de manière indirecte par le système suite à une action dans REMOCRA. Ex : mise à jour des attributs d'un évènement, ajout d'un document, création d'une carte horodatée, etc."));
    }

    public <O extends Record> CriseSuivi(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CRISE_SUIVI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CRISE_SUIVI_CRISE_IDX, Indexes.CRISE_SUIVI_EVENEMENT_IDX, Indexes.CRISE_SUIVI_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_CRISE_SUIVI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.CRISE_SUIVI_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.CRISE_SUIVI_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.CRISE_SUIVI__CRISE_SUIVI_CRISE_FK, Keys.CRISE_SUIVI__CRISE_SUIVI_EVENEMENT_FK);
    }

    public Crise crise() {
        return new Crise(this, Keys.CRISE_SUIVI__CRISE_SUIVI_CRISE_FK);
    }

    public CriseEvenement criseEvenement() {
        return new CriseEvenement(this, Keys.CRISE_SUIVI__CRISE_SUIVI_EVENEMENT_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CriseSuivi as(String alias) {
        return new CriseSuivi(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CriseSuivi as(Name alias) {
        return new CriseSuivi(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CriseSuivi rename(String name) {
        return new CriseSuivi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CriseSuivi rename(Name name) {
        return new CriseSuivi(name, null);
    }
}
