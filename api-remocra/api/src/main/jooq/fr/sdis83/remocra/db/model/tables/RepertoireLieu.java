/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Répertoire de lieu. Un répertoire de lieu constitue une source de données 
 * géographique dont l'ensemble de données est représenté par une instruction 
 * SQL permettant de se localiser facilement dans REMOCRA
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepertoireLieu extends TableImpl<Record> {

    private static final long serialVersionUID = -428731891;

    /**
     * The reference instance of <code>remocra.repertoire_lieu</code>
     */
    public static final RepertoireLieu REPERTOIRE_LIEU = new RepertoireLieu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.repertoire_lieu.id</code>. Identifiant interne auto-généré
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.repertoire_lieu_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne auto-généré");

    /**
     * The column <code>remocra.repertoire_lieu.code</code>. Code permettant d'identifier de manière unique et pérenne le repertoire. Ex : COMMUNE, LIEUX_DIT, HYDROGRAPHIE, CADASTRE
     */
    public final TableField<Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Code permettant d'identifier de manière unique et pérenne le repertoire. Ex : COMMUNE, LIEUX_DIT, HYDROGRAPHIE, CADASTRE");

    /**
     * The column <code>remocra.repertoire_lieu.libelle</code>. Nom du répertoire de lieux : Ex Communes, Cours d'eau, Lieux-dits, Quartiers, Hameaux, etc.
     */
    public final TableField<Record, String> LIBELLE = createField("libelle", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Nom du répertoire de lieux : Ex Communes, Cours d'eau, Lieux-dits, Quartiers, Hameaux, etc.");

    /**
     * The column <code>remocra.repertoire_lieu.source_sql</code>. Définition de la requête SQL éventuelle à exécuter sur la base de données REMOCRA
     */
    public final TableField<Record, String> SOURCE_SQL = createField("source_sql", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Définition de la requête SQL éventuelle à exécuter sur la base de données REMOCRA");

    /**
     * The column <code>remocra.repertoire_lieu.source_sql_valeur</code>. Colonne de la requête SQL contenant la position du lieu
     */
    public final TableField<Record, String> SOURCE_SQL_VALEUR = createField("source_sql_valeur", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Colonne de la requête SQL contenant la position du lieu");

    /**
     * The column <code>remocra.repertoire_lieu.source_sql_libelle</code>. Colonne de la requête SQL contenant le libellé associé à la position du lieu. La recherche s'effectue sur les valeurs contenues dans cette colonne sous la forme LIKE%mon_texte%
     */
    public final TableField<Record, String> SOURCE_SQL_LIBELLE = createField("source_sql_libelle", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Colonne de la requête SQL contenant le libellé associé à la position du lieu. La recherche s'effectue sur les valeurs contenues dans cette colonne sous la forme LIKE%mon_texte%");

    /**
     * Create a <code>remocra.repertoire_lieu</code> table reference
     */
    public RepertoireLieu() {
        this(DSL.name("repertoire_lieu"), null);
    }

    /**
     * Create an aliased <code>remocra.repertoire_lieu</code> table reference
     */
    public RepertoireLieu(String alias) {
        this(DSL.name(alias), REPERTOIRE_LIEU);
    }

    /**
     * Create an aliased <code>remocra.repertoire_lieu</code> table reference
     */
    public RepertoireLieu(Name alias) {
        this(alias, REPERTOIRE_LIEU);
    }

    private RepertoireLieu(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private RepertoireLieu(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Répertoire de lieu. Un répertoire de lieu constitue une source de données géographique dont l'ensemble de données est représenté par une instruction SQL permettant de se localiser facilement dans REMOCRA"));
    }

    public <O extends Record> RepertoireLieu(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REPERTOIRE_LIEU);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REPERTOIRE_LIEU_CODE_KEY, Indexes.REPERTOIRE_LIEU_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_REPERTOIRE_LIEU;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.REPERTOIRE_LIEU_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.REPERTOIRE_LIEU_PKEY, Keys.REPERTOIRE_LIEU_CODE_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepertoireLieu as(String alias) {
        return new RepertoireLieu(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepertoireLieu as(Name alias) {
        return new RepertoireLieu(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RepertoireLieu rename(String name) {
        return new RepertoireLieu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RepertoireLieu rename(Name name) {
        return new RepertoireLieu(name, null);
    }
}
