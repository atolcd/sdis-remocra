/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Utilisateur extends TableImpl<Record> {

    private static final long serialVersionUID = -1650471043;

    /**
     * The reference instance of <code>remocra.utilisateur</code>
     */
    public static final Utilisateur UTILISATEUR = new Utilisateur();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.utilisateur.id</code>.
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.utilisateur_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>remocra.utilisateur.actif</code>.
     */
    public final TableField<Record, Boolean> ACTIF = createField("actif", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>remocra.utilisateur.email</code>.
     */
    public final TableField<Record, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>remocra.utilisateur.identifiant</code>.
     */
    public final TableField<Record, String> IDENTIFIANT = createField("identifiant", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>remocra.utilisateur.message_remocra</code>.
     */
    public final TableField<Record, Boolean> MESSAGE_REMOCRA = createField("message_remocra", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>remocra.utilisateur.nom</code>.
     */
    public final TableField<Record, String> NOM = createField("nom", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.utilisateur.password</code>.
     */
    public final TableField<Record, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>remocra.utilisateur.prenom</code>.
     */
    public final TableField<Record, String> PRENOM = createField("prenom", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.utilisateur.salt</code>.
     */
    public final TableField<Record, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.utilisateur.telephone</code>.
     */
    public final TableField<Record, String> TELEPHONE = createField("telephone", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.utilisateur.version</code>.
     */
    public final TableField<Record, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>remocra.utilisateur.organisme</code>.
     */
    public final TableField<Record, Long> ORGANISME = createField("organisme", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.utilisateur.profil_utilisateur</code>.
     */
    public final TableField<Record, Long> PROFIL_UTILISATEUR = createField("profil_utilisateur", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>remocra.utilisateur</code> table reference
     */
    public Utilisateur() {
        this(DSL.name("utilisateur"), null);
    }

    /**
     * Create an aliased <code>remocra.utilisateur</code> table reference
     */
    public Utilisateur(String alias) {
        this(DSL.name(alias), UTILISATEUR);
    }

    /**
     * Create an aliased <code>remocra.utilisateur</code> table reference
     */
    public Utilisateur(Name alias) {
        this(alias, UTILISATEUR);
    }

    private Utilisateur(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Utilisateur(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Utilisateur(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, UTILISATEUR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.UTILISATEUR_ORGANISME_IDX, Indexes.UTILISATEUR_PKEY, Indexes.UTILISATEUR_PROFIL_UTILISATEUR_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_UTILISATEUR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.UTILISATEUR_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.UTILISATEUR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.UTILISATEUR__FKDD163383374ADD52, Keys.UTILISATEUR__FKDD1633832343353);
    }

    public Organisme organisme() {
        return new Organisme(this, Keys.UTILISATEUR__FKDD163383374ADD52);
    }

    public ProfilUtilisateur profilUtilisateur() {
        return new ProfilUtilisateur(this, Keys.UTILISATEUR__FKDD1633832343353);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Utilisateur as(String alias) {
        return new Utilisateur(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Utilisateur as(Name alias) {
        return new Utilisateur(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Utilisateur rename(String name) {
        return new Utilisateur(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utilisateur rename(Name name) {
        return new Utilisateur(name, null);
    }
}
