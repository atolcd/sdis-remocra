/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.converter.TimestampToInstantConverter;
import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DdeApi extends TableImpl<Record> {

    private static final long serialVersionUID = 1821000619;

    /**
     * The reference instance of <code>remocra.dde_api</code>
     */
    public static final DdeApi DDE_API = new DdeApi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.dde_api.id</code>.
     */
    public final TableField<Record, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.dde_api_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>remocra.dde_api.organisme</code>.
     */
    public final TableField<Record, Long> ORGANISME = createField("organisme", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remocra.dde_api.code</code>.
     */
    public final TableField<Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>remocra.dde_api.date_demande</code>.
     */
    public final TableField<Record, Instant> DATE_DEMANDE = createField("date_demande", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new TimestampToInstantConverter());

    /**
     * The column <code>remocra.dde_api.utilise</code>.
     */
    public final TableField<Record, Boolean> UTILISE = createField("utilise", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>remocra.dde_api</code> table reference
     */
    public DdeApi() {
        this(DSL.name("dde_api"), null);
    }

    /**
     * Create an aliased <code>remocra.dde_api</code> table reference
     */
    public DdeApi(String alias) {
        this(DSL.name(alias), DDE_API);
    }

    /**
     * Create an aliased <code>remocra.dde_api</code> table reference
     */
    public DdeApi(Name alias) {
        this(alias, DDE_API);
    }

    private DdeApi(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private DdeApi(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DdeApi(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, DDE_API);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DDE_API_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Integer> getIdentity() {
        return Keys.IDENTITY_DDE_API;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.DDE_API_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.DDE_API_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.DDE_API__FK_ORGANISME_DDE_API);
    }

    public Organisme organisme() {
        return new Organisme(this, Keys.DDE_API__FK_ORGANISME_DDE_API);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DdeApi as(String alias) {
        return new DdeApi(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DdeApi as(Name alias) {
        return new DdeApi(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DdeApi rename(String name) {
        return new DdeApi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DdeApi rename(Name name) {
        return new DdeApi(name, null);
    }
}
