/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.tables;


import fr.sdis83.remocra.db.model.Indexes;
import fr.sdis83.remocra.db.model.Keys;
import fr.sdis83.remocra.db.model.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactRoles extends TableImpl<Record> {

    private static final long serialVersionUID = -292946766;

    /**
     * The reference instance of <code>remocra.contact_roles</code>
     */
    public static final ContactRoles CONTACT_ROLES = new ContactRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.contact_roles.contact</code>.
     */
    public final TableField<Record, Long> CONTACT = createField("contact", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>remocra.contact_roles.roles</code>.
     */
    public final TableField<Record, Long> ROLES = createField("roles", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>remocra.contact_roles</code> table reference
     */
    public ContactRoles() {
        this(DSL.name("contact_roles"), null);
    }

    /**
     * Create an aliased <code>remocra.contact_roles</code> table reference
     */
    public ContactRoles(String alias) {
        this(DSL.name(alias), CONTACT_ROLES);
    }

    /**
     * Create an aliased <code>remocra.contact_roles</code> table reference
     */
    public ContactRoles(Name alias) {
        this(alias, CONTACT_ROLES);
    }

    private ContactRoles(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ContactRoles(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ContactRoles(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CONTACT_ROLES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONTACT_ROLES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.CONTACT_ROLES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.CONTACT_ROLES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.CONTACT_ROLES__CONTACT_ROLES_CONTACT, Keys.CONTACT_ROLES__CONTACT_ROLES_ROLES);
    }

    public Contact contact() {
        return new Contact(this, Keys.CONTACT_ROLES__CONTACT_ROLES_CONTACT);
    }

    public Role role() {
        return new Role(this, Keys.CONTACT_ROLES__CONTACT_ROLES_ROLES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContactRoles as(String alias) {
        return new ContactRoles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContactRoles as(Name alias) {
        return new ContactRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactRoles rename(String name) {
        return new ContactRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactRoles rename(Name name) {
        return new ContactRoles(name, null);
    }
}
