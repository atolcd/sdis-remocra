/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Section cadastrale d'une commune
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CadastreSection extends TableImpl<Record> {

    private static final long serialVersionUID = -1233818445;

    /**
     * The reference instance of <code>remocra.cadastre_section</code>
     */
    public static final CadastreSection CADASTRE_SECTION = new CadastreSection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.cadastre_section.id</code>. Identifiant autogénéré
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.cadastre_section_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant autogénéré");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<Record, Object> GEOMETRIE = createField("geometrie", org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"geometry\"").nullable(false), this, "Géometrie de la section cadastrale");

    /**
     * The column <code>remocra.cadastre_section.numero</code>. Numéro d'identification de la section
     */
    public final TableField<Record, String> NUMERO = createField("numero", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Numéro d'identification de la section");

    /**
     * The column <code>remocra.cadastre_section.commune</code>. Identifiant de correspondance avec la commune rattachée à une section
     */
    public final TableField<Record, Long> COMMUNE = createField("commune", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Identifiant de correspondance avec la commune rattachée à une section");

    /**
     * Create a <code>remocra.cadastre_section</code> table reference
     */
    public CadastreSection() {
        this(DSL.name("cadastre_section"), null);
    }

    /**
     * Create an aliased <code>remocra.cadastre_section</code> table reference
     */
    public CadastreSection(String alias) {
        this(DSL.name(alias), CADASTRE_SECTION);
    }

    /**
     * Create an aliased <code>remocra.cadastre_section</code> table reference
     */
    public CadastreSection(Name alias) {
        this(alias, CADASTRE_SECTION);
    }

    private CadastreSection(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CadastreSection(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Section cadastrale d'une commune"));
    }

    public <O extends Record> CadastreSection(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, CADASTRE_SECTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CADASTRE_SECTION_GEOMETRIE_IDX, Indexes.CADASTRE_SECTION_PKEY, Indexes.UK_CADASTRE_SECTION_NUMERO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_CADASTRE_SECTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.CADASTRE_SECTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.CADASTRE_SECTION_PKEY, Keys.UK_CADASTRE_SECTION_NUMERO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.CADASTRE_SECTION__FK_CADASTRE_SECTION_COMMUNE);
    }

    public Commune commune() {
        return new Commune(this, Keys.CADASTRE_SECTION__FK_CADASTRE_SECTION_COMMUNE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CadastreSection as(String alias) {
        return new CadastreSection(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CadastreSection as(Name alias) {
        return new CadastreSection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CadastreSection rename(String name) {
        return new CadastreSection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CadastreSection rename(Name name) {
        return new CadastreSection(name, null);
    }
}
