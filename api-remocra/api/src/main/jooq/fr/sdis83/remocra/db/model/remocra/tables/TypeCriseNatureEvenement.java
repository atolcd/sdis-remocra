/*
 * This file is generated by jOOQ.
 */
package fr.sdis83.remocra.db.model.remocra.tables;


import fr.sdis83.remocra.db.model.remocra.Indexes;
import fr.sdis83.remocra.db.model.remocra.Keys;
import fr.sdis83.remocra.db.model.remocra.Remocra;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Gestion de crise : Nature de l'évènement attaché à une catégorie. Ex : 
 * "Route barrée" pour la catégorie "Réseau routier"
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeCriseNatureEvenement extends TableImpl<Record> {

    private static final long serialVersionUID = -523410752;

    /**
     * The reference instance of <code>remocra.type_crise_nature_evenement</code>
     */
    public static final TypeCriseNatureEvenement TYPE_CRISE_NATURE_EVENEMENT = new TypeCriseNatureEvenement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>remocra.type_crise_nature_evenement.id</code>. Identifiant interne
     */
    public final TableField<Record, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('remocra.type_crise_nature_evenement_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "Identifiant interne");

    /**
     * The column <code>remocra.type_crise_nature_evenement.actif</code>. Sélectionnable dans l'interface
     */
    public final TableField<Record, Boolean> ACTIF = createField("actif", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Sélectionnable dans l'interface");

    /**
     * The column <code>remocra.type_crise_nature_evenement.code</code>. Code de la nature. Facilite les échanges de données
     */
    public final TableField<Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Code de la nature. Facilite les échanges de données");

    /**
     * The column <code>remocra.type_crise_nature_evenement.nom</code>. Libellé de la nature
     */
    public final TableField<Record, String> NOM = createField("nom", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Libellé de la nature");

    /**
     * The column <code>remocra.type_crise_nature_evenement.type_geometrie</code>. Type de géométrie. Si non renseigné, type d'évènement non géolocalisable
     */
    public final TableField<Record, String> TYPE_GEOMETRIE = createField("type_geometrie", org.jooq.impl.SQLDataType.VARCHAR, this, "Type de géométrie. Si non renseigné, type d'évènement non géolocalisable");

    /**
     * The column <code>remocra.type_crise_nature_evenement.categorie_evenement</code>. Catégorie d'évènement associée
     */
    public final TableField<Record, Long> CATEGORIE_EVENEMENT = createField("categorie_evenement", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Catégorie d'évènement associée");

    /**
     * Create a <code>remocra.type_crise_nature_evenement</code> table reference
     */
    public TypeCriseNatureEvenement() {
        this(DSL.name("type_crise_nature_evenement"), null);
    }

    /**
     * Create an aliased <code>remocra.type_crise_nature_evenement</code> table reference
     */
    public TypeCriseNatureEvenement(String alias) {
        this(DSL.name(alias), TYPE_CRISE_NATURE_EVENEMENT);
    }

    /**
     * Create an aliased <code>remocra.type_crise_nature_evenement</code> table reference
     */
    public TypeCriseNatureEvenement(Name alias) {
        this(alias, TYPE_CRISE_NATURE_EVENEMENT);
    }

    private TypeCriseNatureEvenement(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private TypeCriseNatureEvenement(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Gestion de crise : Nature de l'évènement attaché à une catégorie. Ex : \"Route barrée\" pour la catégorie \"Réseau routier\""));
    }

    public <O extends Record> TypeCriseNatureEvenement(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TYPE_CRISE_NATURE_EVENEMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remocra.REMOCRA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TYPE_CRISE_NATURE_EVENEMENT_CATEGORIE_EVENEMENT_IDX, Indexes.TYPE_CRISE_NATURE_EVENEMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_TYPE_CRISE_NATURE_EVENEMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.TYPE_CRISE_NATURE_EVENEMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.TYPE_CRISE_NATURE_EVENEMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.TYPE_CRISE_NATURE_EVENEMENT__TYPE_CRISE_NATURE_EVENEMENT_CATEGORIE_EVENEMENT_FK);
    }

    public TypeCriseCategorieEvenement typeCriseCategorieEvenement() {
        return new TypeCriseCategorieEvenement(this, Keys.TYPE_CRISE_NATURE_EVENEMENT__TYPE_CRISE_NATURE_EVENEMENT_CATEGORIE_EVENEMENT_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeCriseNatureEvenement as(String alias) {
        return new TypeCriseNatureEvenement(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeCriseNatureEvenement as(Name alias) {
        return new TypeCriseNatureEvenement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TypeCriseNatureEvenement rename(String name) {
        return new TypeCriseNatureEvenement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TypeCriseNatureEvenement rename(Name name) {
        return new TypeCriseNatureEvenement(name, null);
    }
}
